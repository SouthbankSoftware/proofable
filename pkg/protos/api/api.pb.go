// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api // import "github.com/SouthbankSoftware/proofable/pkg/protos/api"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import anchor "github.com/SouthbankSoftware/proofable/pkg/protos/anchor"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Trie represents a dictionary of key-values that can be built incrementally,
// whose root hash at any given time can be also dervied efficiently. Once the
// root hash is proven to a Blockchain, every key-value is also proven
type Trie struct {
	// Id is the trie ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Root is the root hash of the trie
	Root                 string   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trie) Reset()         { *m = Trie{} }
func (m *Trie) String() string { return proto.CompactTextString(m) }
func (*Trie) ProtoMessage()    {}
func (*Trie) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{0}
}
func (m *Trie) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trie.Unmarshal(m, b)
}
func (m *Trie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trie.Marshal(b, m, deterministic)
}
func (dst *Trie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trie.Merge(dst, src)
}
func (m *Trie) XXX_Size() int {
	return xxx_messageInfo_Trie.Size(m)
}
func (m *Trie) XXX_DiscardUnknown() {
	xxx_messageInfo_Trie.DiscardUnknown(m)
}

var xxx_messageInfo_Trie proto.InternalMessageInfo

func (m *Trie) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trie) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

// DataChunk represents a chunk of data transmitted in a gRPC stream
type DataChunk struct {
	// Data is the data within the DataChunk
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Metadata is the metadata of the DataChunk stream, which is available in the
	// first DataChunk
	//
	// Types that are valid to be assigned to Metadata:
	//	*DataChunk_TrieRequest
	//	*DataChunk_VerifyKeyValuesProofRequest
	Metadata             isDataChunk_Metadata `protobuf_oneof:"metadata"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DataChunk) Reset()         { *m = DataChunk{} }
func (m *DataChunk) String() string { return proto.CompactTextString(m) }
func (*DataChunk) ProtoMessage()    {}
func (*DataChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{1}
}
func (m *DataChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataChunk.Unmarshal(m, b)
}
func (m *DataChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataChunk.Marshal(b, m, deterministic)
}
func (dst *DataChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataChunk.Merge(dst, src)
}
func (m *DataChunk) XXX_Size() int {
	return xxx_messageInfo_DataChunk.Size(m)
}
func (m *DataChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DataChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DataChunk proto.InternalMessageInfo

func (m *DataChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type isDataChunk_Metadata interface {
	isDataChunk_Metadata()
}

type DataChunk_TrieRequest struct {
	TrieRequest *TrieRequest `protobuf:"bytes,2,opt,name=trie_request,json=trieRequest,proto3,oneof"`
}

type DataChunk_VerifyKeyValuesProofRequest struct {
	VerifyKeyValuesProofRequest *VerifyKeyValuesProofRequest `protobuf:"bytes,3,opt,name=verify_key_values_proof_request,json=verifyKeyValuesProofRequest,proto3,oneof"`
}

func (*DataChunk_TrieRequest) isDataChunk_Metadata() {}

func (*DataChunk_VerifyKeyValuesProofRequest) isDataChunk_Metadata() {}

func (m *DataChunk) GetMetadata() isDataChunk_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DataChunk) GetTrieRequest() *TrieRequest {
	if x, ok := m.GetMetadata().(*DataChunk_TrieRequest); ok {
		return x.TrieRequest
	}
	return nil
}

func (m *DataChunk) GetVerifyKeyValuesProofRequest() *VerifyKeyValuesProofRequest {
	if x, ok := m.GetMetadata().(*DataChunk_VerifyKeyValuesProofRequest); ok {
		return x.VerifyKeyValuesProofRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DataChunk) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DataChunk_OneofMarshaler, _DataChunk_OneofUnmarshaler, _DataChunk_OneofSizer, []interface{}{
		(*DataChunk_TrieRequest)(nil),
		(*DataChunk_VerifyKeyValuesProofRequest)(nil),
	}
}

func _DataChunk_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DataChunk)
	// metadata
	switch x := m.Metadata.(type) {
	case *DataChunk_TrieRequest:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TrieRequest); err != nil {
			return err
		}
	case *DataChunk_VerifyKeyValuesProofRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VerifyKeyValuesProofRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DataChunk.Metadata has unexpected type %T", x)
	}
	return nil
}

func _DataChunk_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DataChunk)
	switch tag {
	case 2: // metadata.trie_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TrieRequest)
		err := b.DecodeMessage(msg)
		m.Metadata = &DataChunk_TrieRequest{msg}
		return true, err
	case 3: // metadata.verify_key_values_proof_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VerifyKeyValuesProofRequest)
		err := b.DecodeMessage(msg)
		m.Metadata = &DataChunk_VerifyKeyValuesProofRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DataChunk_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DataChunk)
	// metadata
	switch x := m.Metadata.(type) {
	case *DataChunk_TrieRequest:
		s := proto.Size(x.TrieRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataChunk_VerifyKeyValuesProofRequest:
		s := proto.Size(x.VerifyKeyValuesProofRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// KeyValue represents a key-value
type KeyValue struct {
	// Key is the key of the key-value
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// KeySep is the key separators for chained tries
	KeySep []uint32 `protobuf:"varint,2,rep,packed,name=key_sep,json=keySep,proto3" json:"key_sep,omitempty"`
	// Value is the value of the key-value
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Metadata is the metadata of the KeyValue stream, which is available in the
	// first KeyValue
	//
	// Types that are valid to be assigned to Metadata:
	//	*KeyValue_TrieKeyValuesRequest
	Metadata             isKeyValue_Metadata `protobuf_oneof:"metadata"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{2}
}
func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValue.Unmarshal(m, b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
}
func (dst *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(dst, src)
}
func (m *KeyValue) XXX_Size() int {
	return xxx_messageInfo_KeyValue.Size(m)
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetKeySep() []uint32 {
	if m != nil {
		return m.KeySep
	}
	return nil
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type isKeyValue_Metadata interface {
	isKeyValue_Metadata()
}

type KeyValue_TrieKeyValuesRequest struct {
	TrieKeyValuesRequest *TrieKeyValuesRequest `protobuf:"bytes,4,opt,name=trie_key_values_request,json=trieKeyValuesRequest,proto3,oneof"`
}

func (*KeyValue_TrieKeyValuesRequest) isKeyValue_Metadata() {}

func (m *KeyValue) GetMetadata() isKeyValue_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *KeyValue) GetTrieKeyValuesRequest() *TrieKeyValuesRequest {
	if x, ok := m.GetMetadata().(*KeyValue_TrieKeyValuesRequest); ok {
		return x.TrieKeyValuesRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KeyValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KeyValue_OneofMarshaler, _KeyValue_OneofUnmarshaler, _KeyValue_OneofSizer, []interface{}{
		(*KeyValue_TrieKeyValuesRequest)(nil),
	}
}

func _KeyValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KeyValue)
	// metadata
	switch x := m.Metadata.(type) {
	case *KeyValue_TrieKeyValuesRequest:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TrieKeyValuesRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KeyValue.Metadata has unexpected type %T", x)
	}
	return nil
}

func _KeyValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KeyValue)
	switch tag {
	case 4: // metadata.trie_key_values_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TrieKeyValuesRequest)
		err := b.DecodeMessage(msg)
		m.Metadata = &KeyValue_TrieKeyValuesRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KeyValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KeyValue)
	// metadata
	switch x := m.Metadata.(type) {
	case *KeyValue_TrieKeyValuesRequest:
		s := proto.Size(x.TrieKeyValuesRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// VerifyProofReplyChunk represents a chunk of data in the verify proof reply
// stream
type VerifyProofReplyChunk struct {
	// Data is the data contained in the chunk
	//
	// Types that are valid to be assigned to Data:
	//	*VerifyProofReplyChunk_KeyValue
	//	*VerifyProofReplyChunk_DotGraphChunk
	//	*VerifyProofReplyChunk_Reply
	Data                 isVerifyProofReplyChunk_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *VerifyProofReplyChunk) Reset()         { *m = VerifyProofReplyChunk{} }
func (m *VerifyProofReplyChunk) String() string { return proto.CompactTextString(m) }
func (*VerifyProofReplyChunk) ProtoMessage()    {}
func (*VerifyProofReplyChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{3}
}
func (m *VerifyProofReplyChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyProofReplyChunk.Unmarshal(m, b)
}
func (m *VerifyProofReplyChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyProofReplyChunk.Marshal(b, m, deterministic)
}
func (dst *VerifyProofReplyChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyProofReplyChunk.Merge(dst, src)
}
func (m *VerifyProofReplyChunk) XXX_Size() int {
	return xxx_messageInfo_VerifyProofReplyChunk.Size(m)
}
func (m *VerifyProofReplyChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyProofReplyChunk.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyProofReplyChunk proto.InternalMessageInfo

type isVerifyProofReplyChunk_Data interface {
	isVerifyProofReplyChunk_Data()
}

type VerifyProofReplyChunk_KeyValue struct {
	KeyValue *KeyValue `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3,oneof"`
}

type VerifyProofReplyChunk_DotGraphChunk struct {
	DotGraphChunk *DataChunk `protobuf:"bytes,2,opt,name=dot_graph_chunk,json=dotGraphChunk,proto3,oneof"`
}

type VerifyProofReplyChunk_Reply struct {
	Reply *VerifyProofReply `protobuf:"bytes,3,opt,name=reply,proto3,oneof"`
}

func (*VerifyProofReplyChunk_KeyValue) isVerifyProofReplyChunk_Data() {}

func (*VerifyProofReplyChunk_DotGraphChunk) isVerifyProofReplyChunk_Data() {}

func (*VerifyProofReplyChunk_Reply) isVerifyProofReplyChunk_Data() {}

func (m *VerifyProofReplyChunk) GetData() isVerifyProofReplyChunk_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *VerifyProofReplyChunk) GetKeyValue() *KeyValue {
	if x, ok := m.GetData().(*VerifyProofReplyChunk_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

func (m *VerifyProofReplyChunk) GetDotGraphChunk() *DataChunk {
	if x, ok := m.GetData().(*VerifyProofReplyChunk_DotGraphChunk); ok {
		return x.DotGraphChunk
	}
	return nil
}

func (m *VerifyProofReplyChunk) GetReply() *VerifyProofReply {
	if x, ok := m.GetData().(*VerifyProofReplyChunk_Reply); ok {
		return x.Reply
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VerifyProofReplyChunk) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VerifyProofReplyChunk_OneofMarshaler, _VerifyProofReplyChunk_OneofUnmarshaler, _VerifyProofReplyChunk_OneofSizer, []interface{}{
		(*VerifyProofReplyChunk_KeyValue)(nil),
		(*VerifyProofReplyChunk_DotGraphChunk)(nil),
		(*VerifyProofReplyChunk_Reply)(nil),
	}
}

func _VerifyProofReplyChunk_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VerifyProofReplyChunk)
	// data
	switch x := m.Data.(type) {
	case *VerifyProofReplyChunk_KeyValue:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KeyValue); err != nil {
			return err
		}
	case *VerifyProofReplyChunk_DotGraphChunk:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DotGraphChunk); err != nil {
			return err
		}
	case *VerifyProofReplyChunk_Reply:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reply); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VerifyProofReplyChunk.Data has unexpected type %T", x)
	}
	return nil
}

func _VerifyProofReplyChunk_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VerifyProofReplyChunk)
	switch tag {
	case 1: // data.key_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KeyValue)
		err := b.DecodeMessage(msg)
		m.Data = &VerifyProofReplyChunk_KeyValue{msg}
		return true, err
	case 2: // data.dot_graph_chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataChunk)
		err := b.DecodeMessage(msg)
		m.Data = &VerifyProofReplyChunk_DotGraphChunk{msg}
		return true, err
	case 3: // data.reply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VerifyProofReply)
		err := b.DecodeMessage(msg)
		m.Data = &VerifyProofReplyChunk_Reply{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VerifyProofReplyChunk_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VerifyProofReplyChunk)
	// data
	switch x := m.Data.(type) {
	case *VerifyProofReplyChunk_KeyValue:
		s := proto.Size(x.KeyValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VerifyProofReplyChunk_DotGraphChunk:
		s := proto.Size(x.DotGraphChunk)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VerifyProofReplyChunk_Reply:
		s := proto.Size(x.Reply)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Key represents a key of a key-value pair
type Key struct {
	// Key is the key of the key-value
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// KeySep is the key separators for chained tries
	KeySep               []uint32 `protobuf:"varint,2,rep,packed,name=key_sep,json=keySep,proto3" json:"key_sep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{4}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (dst *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(dst, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Key) GetKeySep() []uint32 {
	if m != nil {
		return m.KeySep
	}
	return nil
}

// TrieRoot represents a root of a trie. Each modification made to the trie will
// lead to a new trie root
type TrieRoot struct {
	// Root is the root hash of the trie
	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// CreatedAt is the created at timestamp. The timestamp when the root is
	// created
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TrieRoot) Reset()         { *m = TrieRoot{} }
func (m *TrieRoot) String() string { return proto.CompactTextString(m) }
func (*TrieRoot) ProtoMessage()    {}
func (*TrieRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{5}
}
func (m *TrieRoot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrieRoot.Unmarshal(m, b)
}
func (m *TrieRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrieRoot.Marshal(b, m, deterministic)
}
func (dst *TrieRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieRoot.Merge(dst, src)
}
func (m *TrieRoot) XXX_Size() int {
	return xxx_messageInfo_TrieRoot.Size(m)
}
func (m *TrieRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieRoot.DiscardUnknown(m)
}

var xxx_messageInfo_TrieRoot proto.InternalMessageInfo

func (m *TrieRoot) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *TrieRoot) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

// TrieProof represents a proof for a trie at a certain root, which can be
// viewed as a snapshot of all the key-values contained in the trie
type TrieProof struct {
	// Id is the ID of the trie proof
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,2,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// Root is the root hash of the trie proven by this proof
	Root string `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	// CreatedAt is the created at timestamp. The timestamp when the proof is
	// created
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Status is the anchor batch status of the trie proof
	Status anchor.Batch_Status `protobuf:"varint,5,opt,name=status,proto3,enum=anchor.Batch_Status" json:"status,omitempty"`
	// Error is the error message when status is ERROR
	Error string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	// AnchorType is the anchor type the trie proof has been submitted to
	AnchorType anchor.Anchor_Type `protobuf:"varint,7,opt,name=anchor_type,json=anchorType,proto3,enum=anchor.Anchor_Type" json:"anchor_type,omitempty"`
	// TxnId is the Blockchain transaction ID
	TxnId string `protobuf:"bytes,8,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	// TxnUri is the explorer URI for the Blockchain transaction
	TxnUri string `protobuf:"bytes,12,opt,name=txn_uri,json=txnUri,proto3" json:"txn_uri,omitempty"`
	// BlockTime is the Blockchain's block consensus timestamp in seconds
	BlockTime uint64 `protobuf:"varint,9,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	// BlockTimeNano is the Blockcahin's block consensus timestamp's nano part.
	// For most traditional blockchains, this will be zero. For Hedera, this will
	// be the nano part of the transaction's consensus timestamp
	BlockTimeNano uint64 `protobuf:"varint,13,opt,name=block_time_nano,json=blockTimeNano,proto3" json:"block_time_nano,omitempty"`
	// BlockNumber is the Blockchain's block number
	BlockNumber uint64 `protobuf:"varint,10,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// ProofRoot is the root hash of the trie proof, which is the anchor batch's
	// root hash the proof belongs to
	ProofRoot            string   `protobuf:"bytes,11,opt,name=proof_root,json=proofRoot,proto3" json:"proof_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrieProof) Reset()         { *m = TrieProof{} }
func (m *TrieProof) String() string { return proto.CompactTextString(m) }
func (*TrieProof) ProtoMessage()    {}
func (*TrieProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{6}
}
func (m *TrieProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrieProof.Unmarshal(m, b)
}
func (m *TrieProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrieProof.Marshal(b, m, deterministic)
}
func (dst *TrieProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieProof.Merge(dst, src)
}
func (m *TrieProof) XXX_Size() int {
	return xxx_messageInfo_TrieProof.Size(m)
}
func (m *TrieProof) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieProof.DiscardUnknown(m)
}

var xxx_messageInfo_TrieProof proto.InternalMessageInfo

func (m *TrieProof) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrieProof) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

func (m *TrieProof) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *TrieProof) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TrieProof) GetStatus() anchor.Batch_Status {
	if m != nil {
		return m.Status
	}
	return anchor.Batch_ERROR
}

func (m *TrieProof) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TrieProof) GetAnchorType() anchor.Anchor_Type {
	if m != nil {
		return m.AnchorType
	}
	return anchor.Anchor_ETH
}

func (m *TrieProof) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *TrieProof) GetTxnUri() string {
	if m != nil {
		return m.TxnUri
	}
	return ""
}

func (m *TrieProof) GetBlockTime() uint64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *TrieProof) GetBlockTimeNano() uint64 {
	if m != nil {
		return m.BlockTimeNano
	}
	return 0
}

func (m *TrieProof) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *TrieProof) GetProofRoot() string {
	if m != nil {
		return m.ProofRoot
	}
	return ""
}

// RootFilter represents a root filter to query a proof
type RootFilter struct {
	// Root is the root hash. When zero, the current root hash of the trie will be
	// used to retrieve the TrieProof, and the request will be blocked until all
	// ongoing updates are finished
	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// NotBefore is the not before timestamp. When nil, this constraint is not
	// used; when zero, the latest TrieProof for the root hash will be returned
	NotBefore            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RootFilter) Reset()         { *m = RootFilter{} }
func (m *RootFilter) String() string { return proto.CompactTextString(m) }
func (*RootFilter) ProtoMessage()    {}
func (*RootFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{7}
}
func (m *RootFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootFilter.Unmarshal(m, b)
}
func (m *RootFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootFilter.Marshal(b, m, deterministic)
}
func (dst *RootFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootFilter.Merge(dst, src)
}
func (m *RootFilter) XXX_Size() int {
	return xxx_messageInfo_RootFilter.Size(m)
}
func (m *RootFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_RootFilter.DiscardUnknown(m)
}

var xxx_messageInfo_RootFilter proto.InternalMessageInfo

func (m *RootFilter) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *RootFilter) GetNotBefore() *timestamp.Timestamp {
	if m != nil {
		return m.NotBefore
	}
	return nil
}

// KeyValuesFilter represents a key-value filter
type KeyValuesFilter struct {
	// Keys are the keys of key-values that should be included in a key-value
	// proof. Only those trie nodes are on the merkle paths of the given keys will
	// be included in the proof
	Keys                 []*Key   `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValuesFilter) Reset()         { *m = KeyValuesFilter{} }
func (m *KeyValuesFilter) String() string { return proto.CompactTextString(m) }
func (*KeyValuesFilter) ProtoMessage()    {}
func (*KeyValuesFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{8}
}
func (m *KeyValuesFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuesFilter.Unmarshal(m, b)
}
func (m *KeyValuesFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuesFilter.Marshal(b, m, deterministic)
}
func (dst *KeyValuesFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuesFilter.Merge(dst, src)
}
func (m *KeyValuesFilter) XXX_Size() int {
	return xxx_messageInfo_KeyValuesFilter.Size(m)
}
func (m *KeyValuesFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuesFilter.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuesFilter proto.InternalMessageInfo

func (m *KeyValuesFilter) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

// TrieRequest represents a trie request
type TrieRequest struct {
	// TrieId is the trie ID
	TrieId               string   `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrieRequest) Reset()         { *m = TrieRequest{} }
func (m *TrieRequest) String() string { return proto.CompactTextString(m) }
func (*TrieRequest) ProtoMessage()    {}
func (*TrieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{9}
}
func (m *TrieRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrieRequest.Unmarshal(m, b)
}
func (m *TrieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrieRequest.Marshal(b, m, deterministic)
}
func (dst *TrieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieRequest.Merge(dst, src)
}
func (m *TrieRequest) XXX_Size() int {
	return xxx_messageInfo_TrieRequest.Size(m)
}
func (m *TrieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrieRequest proto.InternalMessageInfo

func (m *TrieRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

// TrieKeyValuesRequest represents a trie key-values request. The returned
// KeyValues are ordered by the keys alphabetically
type TrieKeyValuesRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// Root is the root hash (optional). When zero, the current root hash of the
	// trie will be used to retrieve the TrieKeyValues, and the request will be
	// blocked until all ongoing updates are finished
	Root                 string   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrieKeyValuesRequest) Reset()         { *m = TrieKeyValuesRequest{} }
func (m *TrieKeyValuesRequest) String() string { return proto.CompactTextString(m) }
func (*TrieKeyValuesRequest) ProtoMessage()    {}
func (*TrieKeyValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{10}
}
func (m *TrieKeyValuesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrieKeyValuesRequest.Unmarshal(m, b)
}
func (m *TrieKeyValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrieKeyValuesRequest.Marshal(b, m, deterministic)
}
func (dst *TrieKeyValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieKeyValuesRequest.Merge(dst, src)
}
func (m *TrieKeyValuesRequest) XXX_Size() int {
	return xxx_messageInfo_TrieKeyValuesRequest.Size(m)
}
func (m *TrieKeyValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieKeyValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrieKeyValuesRequest proto.InternalMessageInfo

func (m *TrieKeyValuesRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

func (m *TrieKeyValuesRequest) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

// TrieKeyValueRequest represents a trie key-value request
type TrieKeyValueRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// Root is the root hash (optional). When zero, the current root hash of the
	// trie will be used to retrieve the TrieKeyValues, and the request will be
	// blocked until all ongoing updates are finished
	Root string `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	// Key is the key of the key-value
	Key                  *Key     `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrieKeyValueRequest) Reset()         { *m = TrieKeyValueRequest{} }
func (m *TrieKeyValueRequest) String() string { return proto.CompactTextString(m) }
func (*TrieKeyValueRequest) ProtoMessage()    {}
func (*TrieKeyValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{11}
}
func (m *TrieKeyValueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrieKeyValueRequest.Unmarshal(m, b)
}
func (m *TrieKeyValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrieKeyValueRequest.Marshal(b, m, deterministic)
}
func (dst *TrieKeyValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieKeyValueRequest.Merge(dst, src)
}
func (m *TrieKeyValueRequest) XXX_Size() int {
	return xxx_messageInfo_TrieKeyValueRequest.Size(m)
}
func (m *TrieKeyValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieKeyValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrieKeyValueRequest proto.InternalMessageInfo

func (m *TrieKeyValueRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

func (m *TrieKeyValueRequest) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *TrieKeyValueRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// TrieRootsRequest represents a trie roots request. The returned TrieRoots are
// in chronological order
type TrieRootsRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// RootFilter is the root filter (optional). When nil, all TrieRoots will be
	// returned
	RootFilter           *RootFilter `protobuf:"bytes,2,opt,name=root_filter,json=rootFilter,proto3" json:"root_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TrieRootsRequest) Reset()         { *m = TrieRootsRequest{} }
func (m *TrieRootsRequest) String() string { return proto.CompactTextString(m) }
func (*TrieRootsRequest) ProtoMessage()    {}
func (*TrieRootsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{12}
}
func (m *TrieRootsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrieRootsRequest.Unmarshal(m, b)
}
func (m *TrieRootsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrieRootsRequest.Marshal(b, m, deterministic)
}
func (dst *TrieRootsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieRootsRequest.Merge(dst, src)
}
func (m *TrieRootsRequest) XXX_Size() int {
	return xxx_messageInfo_TrieRootsRequest.Size(m)
}
func (m *TrieRootsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieRootsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrieRootsRequest proto.InternalMessageInfo

func (m *TrieRootsRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

func (m *TrieRootsRequest) GetRootFilter() *RootFilter {
	if m != nil {
		return m.RootFilter
	}
	return nil
}

// SetTrieRootRequest represents a set trie root request
type SetTrieRootRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// Root is the root hash to set to
	Root                 string   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetTrieRootRequest) Reset()         { *m = SetTrieRootRequest{} }
func (m *SetTrieRootRequest) String() string { return proto.CompactTextString(m) }
func (*SetTrieRootRequest) ProtoMessage()    {}
func (*SetTrieRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{13}
}
func (m *SetTrieRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetTrieRootRequest.Unmarshal(m, b)
}
func (m *SetTrieRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetTrieRootRequest.Marshal(b, m, deterministic)
}
func (dst *SetTrieRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTrieRootRequest.Merge(dst, src)
}
func (m *SetTrieRootRequest) XXX_Size() int {
	return xxx_messageInfo_SetTrieRootRequest.Size(m)
}
func (m *SetTrieRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTrieRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetTrieRootRequest proto.InternalMessageInfo

func (m *SetTrieRootRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

func (m *SetTrieRootRequest) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

// TrieProofsRequest represents a trie proofs request. The returned TrieProofs
// are ordered by root alphabetically then by created at timestamp
// chronologically
type TrieProofsRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// RootFilter is the root filter (optional). When nil, all TrieProofs will be
	// returned
	RootFilter           *RootFilter `protobuf:"bytes,2,opt,name=root_filter,json=rootFilter,proto3" json:"root_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TrieProofsRequest) Reset()         { *m = TrieProofsRequest{} }
func (m *TrieProofsRequest) String() string { return proto.CompactTextString(m) }
func (*TrieProofsRequest) ProtoMessage()    {}
func (*TrieProofsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{14}
}
func (m *TrieProofsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrieProofsRequest.Unmarshal(m, b)
}
func (m *TrieProofsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrieProofsRequest.Marshal(b, m, deterministic)
}
func (dst *TrieProofsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieProofsRequest.Merge(dst, src)
}
func (m *TrieProofsRequest) XXX_Size() int {
	return xxx_messageInfo_TrieProofsRequest.Size(m)
}
func (m *TrieProofsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieProofsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrieProofsRequest proto.InternalMessageInfo

func (m *TrieProofsRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

func (m *TrieProofsRequest) GetRootFilter() *RootFilter {
	if m != nil {
		return m.RootFilter
	}
	return nil
}

// TrieProofRequest represents a trie proof request
type TrieProofRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// Query is the query to get the TrieProof
	//
	// Types that are valid to be assigned to Query:
	//	*TrieProofRequest_ProofId
	//	*TrieProofRequest_RootFilter
	Query                isTrieProofRequest_Query `protobuf_oneof:"query"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TrieProofRequest) Reset()         { *m = TrieProofRequest{} }
func (m *TrieProofRequest) String() string { return proto.CompactTextString(m) }
func (*TrieProofRequest) ProtoMessage()    {}
func (*TrieProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{15}
}
func (m *TrieProofRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrieProofRequest.Unmarshal(m, b)
}
func (m *TrieProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrieProofRequest.Marshal(b, m, deterministic)
}
func (dst *TrieProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieProofRequest.Merge(dst, src)
}
func (m *TrieProofRequest) XXX_Size() int {
	return xxx_messageInfo_TrieProofRequest.Size(m)
}
func (m *TrieProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrieProofRequest proto.InternalMessageInfo

func (m *TrieProofRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

type isTrieProofRequest_Query interface {
	isTrieProofRequest_Query()
}

type TrieProofRequest_ProofId struct {
	ProofId string `protobuf:"bytes,2,opt,name=proof_id,json=proofId,proto3,oneof"`
}

type TrieProofRequest_RootFilter struct {
	RootFilter *RootFilter `protobuf:"bytes,3,opt,name=root_filter,json=rootFilter,proto3,oneof"`
}

func (*TrieProofRequest_ProofId) isTrieProofRequest_Query() {}

func (*TrieProofRequest_RootFilter) isTrieProofRequest_Query() {}

func (m *TrieProofRequest) GetQuery() isTrieProofRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *TrieProofRequest) GetProofId() string {
	if x, ok := m.GetQuery().(*TrieProofRequest_ProofId); ok {
		return x.ProofId
	}
	return ""
}

func (m *TrieProofRequest) GetRootFilter() *RootFilter {
	if x, ok := m.GetQuery().(*TrieProofRequest_RootFilter); ok {
		return x.RootFilter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TrieProofRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TrieProofRequest_OneofMarshaler, _TrieProofRequest_OneofUnmarshaler, _TrieProofRequest_OneofSizer, []interface{}{
		(*TrieProofRequest_ProofId)(nil),
		(*TrieProofRequest_RootFilter)(nil),
	}
}

func _TrieProofRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TrieProofRequest)
	// query
	switch x := m.Query.(type) {
	case *TrieProofRequest_ProofId:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ProofId)
	case *TrieProofRequest_RootFilter:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RootFilter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TrieProofRequest.Query has unexpected type %T", x)
	}
	return nil
}

func _TrieProofRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TrieProofRequest)
	switch tag {
	case 2: // query.proof_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Query = &TrieProofRequest_ProofId{x}
		return true, err
	case 3: // query.root_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RootFilter)
		err := b.DecodeMessage(msg)
		m.Query = &TrieProofRequest_RootFilter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TrieProofRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TrieProofRequest)
	// query
	switch x := m.Query.(type) {
	case *TrieProofRequest_ProofId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ProofId)))
		n += len(x.ProofId)
	case *TrieProofRequest_RootFilter:
		s := proto.Size(x.RootFilter)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateTrieProofRequest represents a create trie proof request
type CreateTrieProofRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// Root is the root hash (optional). When zero, the current root hash of the
	// trie will be used to create the TrieProof, and the request will be blocked
	// until all ongoing updates are finished
	Root string `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	// AnchorType is the anchor type the trie proof should be submitted to.
	// Default to ETH
	AnchorType           anchor.Anchor_Type `protobuf:"varint,3,opt,name=anchor_type,json=anchorType,proto3,enum=anchor.Anchor_Type" json:"anchor_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreateTrieProofRequest) Reset()         { *m = CreateTrieProofRequest{} }
func (m *CreateTrieProofRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTrieProofRequest) ProtoMessage()    {}
func (*CreateTrieProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{16}
}
func (m *CreateTrieProofRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTrieProofRequest.Unmarshal(m, b)
}
func (m *CreateTrieProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTrieProofRequest.Marshal(b, m, deterministic)
}
func (dst *CreateTrieProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTrieProofRequest.Merge(dst, src)
}
func (m *CreateTrieProofRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTrieProofRequest.Size(m)
}
func (m *CreateTrieProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTrieProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTrieProofRequest proto.InternalMessageInfo

func (m *CreateTrieProofRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

func (m *CreateTrieProofRequest) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *CreateTrieProofRequest) GetAnchorType() anchor.Anchor_Type {
	if m != nil {
		return m.AnchorType
	}
	return anchor.Anchor_ETH
}

// DeleteTrieProofRequest represents a delete trie proof request
type DeleteTrieProofRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// ProofId is the trie proof ID
	ProofId              string   `protobuf:"bytes,2,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTrieProofRequest) Reset()         { *m = DeleteTrieProofRequest{} }
func (m *DeleteTrieProofRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTrieProofRequest) ProtoMessage()    {}
func (*DeleteTrieProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{17}
}
func (m *DeleteTrieProofRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTrieProofRequest.Unmarshal(m, b)
}
func (m *DeleteTrieProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTrieProofRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteTrieProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTrieProofRequest.Merge(dst, src)
}
func (m *DeleteTrieProofRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTrieProofRequest.Size(m)
}
func (m *DeleteTrieProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTrieProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTrieProofRequest proto.InternalMessageInfo

func (m *DeleteTrieProofRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

func (m *DeleteTrieProofRequest) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

// VerifyTrieProofRequest represents a verify trie proof request
type VerifyTrieProofRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// ProofId is the trie proof ID
	ProofId string `protobuf:"bytes,2,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	// OutputKeyValues indicates whether to output key-values contained in the
	// trie
	OutputKeyValues bool `protobuf:"varint,3,opt,name=output_key_values,json=outputKeyValues,proto3" json:"output_key_values,omitempty"`
	// OutputDotGraph indicates whether to output a Graphviz dot graph to
	// visualize the trie
	OutputDotGraph       bool     `protobuf:"varint,4,opt,name=output_dot_graph,json=outputDotGraph,proto3" json:"output_dot_graph,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyTrieProofRequest) Reset()         { *m = VerifyTrieProofRequest{} }
func (m *VerifyTrieProofRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyTrieProofRequest) ProtoMessage()    {}
func (*VerifyTrieProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{18}
}
func (m *VerifyTrieProofRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyTrieProofRequest.Unmarshal(m, b)
}
func (m *VerifyTrieProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyTrieProofRequest.Marshal(b, m, deterministic)
}
func (dst *VerifyTrieProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTrieProofRequest.Merge(dst, src)
}
func (m *VerifyTrieProofRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyTrieProofRequest.Size(m)
}
func (m *VerifyTrieProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTrieProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTrieProofRequest proto.InternalMessageInfo

func (m *VerifyTrieProofRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

func (m *VerifyTrieProofRequest) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

func (m *VerifyTrieProofRequest) GetOutputKeyValues() bool {
	if m != nil {
		return m.OutputKeyValues
	}
	return false
}

func (m *VerifyTrieProofRequest) GetOutputDotGraph() bool {
	if m != nil {
		return m.OutputDotGraph
	}
	return false
}

// CreateKeyValuesProofRequest represents a create key-values proof request
type CreateKeyValuesProofRequest struct {
	// TrieId is the trie ID
	TrieId string `protobuf:"bytes,1,opt,name=trie_id,json=trieId,proto3" json:"trie_id,omitempty"`
	// TrieProof is the trie proof to use. When TrieProof is zero, a new trie
	// proof will be created with current root and ETH
	//
	// Types that are valid to be assigned to TrieProof:
	//	*CreateKeyValuesProofRequest_ProofId
	//	*CreateKeyValuesProofRequest_Request
	TrieProof isCreateKeyValuesProofRequest_TrieProof `protobuf_oneof:"trie_proof"`
	// Filter is the key-values filter (optional). When zero, all key-values will
	// be included in the proof
	Filter               *KeyValuesFilter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateKeyValuesProofRequest) Reset()         { *m = CreateKeyValuesProofRequest{} }
func (m *CreateKeyValuesProofRequest) String() string { return proto.CompactTextString(m) }
func (*CreateKeyValuesProofRequest) ProtoMessage()    {}
func (*CreateKeyValuesProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{19}
}
func (m *CreateKeyValuesProofRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKeyValuesProofRequest.Unmarshal(m, b)
}
func (m *CreateKeyValuesProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKeyValuesProofRequest.Marshal(b, m, deterministic)
}
func (dst *CreateKeyValuesProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKeyValuesProofRequest.Merge(dst, src)
}
func (m *CreateKeyValuesProofRequest) XXX_Size() int {
	return xxx_messageInfo_CreateKeyValuesProofRequest.Size(m)
}
func (m *CreateKeyValuesProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKeyValuesProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKeyValuesProofRequest proto.InternalMessageInfo

func (m *CreateKeyValuesProofRequest) GetTrieId() string {
	if m != nil {
		return m.TrieId
	}
	return ""
}

type isCreateKeyValuesProofRequest_TrieProof interface {
	isCreateKeyValuesProofRequest_TrieProof()
}

type CreateKeyValuesProofRequest_ProofId struct {
	ProofId string `protobuf:"bytes,2,opt,name=proof_id,json=proofId,proto3,oneof"`
}

type CreateKeyValuesProofRequest_Request struct {
	Request *CreateTrieProofRequest `protobuf:"bytes,3,opt,name=request,proto3,oneof"`
}

func (*CreateKeyValuesProofRequest_ProofId) isCreateKeyValuesProofRequest_TrieProof() {}

func (*CreateKeyValuesProofRequest_Request) isCreateKeyValuesProofRequest_TrieProof() {}

func (m *CreateKeyValuesProofRequest) GetTrieProof() isCreateKeyValuesProofRequest_TrieProof {
	if m != nil {
		return m.TrieProof
	}
	return nil
}

func (m *CreateKeyValuesProofRequest) GetProofId() string {
	if x, ok := m.GetTrieProof().(*CreateKeyValuesProofRequest_ProofId); ok {
		return x.ProofId
	}
	return ""
}

func (m *CreateKeyValuesProofRequest) GetRequest() *CreateTrieProofRequest {
	if x, ok := m.GetTrieProof().(*CreateKeyValuesProofRequest_Request); ok {
		return x.Request
	}
	return nil
}

func (m *CreateKeyValuesProofRequest) GetFilter() *KeyValuesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateKeyValuesProofRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateKeyValuesProofRequest_OneofMarshaler, _CreateKeyValuesProofRequest_OneofUnmarshaler, _CreateKeyValuesProofRequest_OneofSizer, []interface{}{
		(*CreateKeyValuesProofRequest_ProofId)(nil),
		(*CreateKeyValuesProofRequest_Request)(nil),
	}
}

func _CreateKeyValuesProofRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateKeyValuesProofRequest)
	// trie_proof
	switch x := m.TrieProof.(type) {
	case *CreateKeyValuesProofRequest_ProofId:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ProofId)
	case *CreateKeyValuesProofRequest_Request:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateKeyValuesProofRequest.TrieProof has unexpected type %T", x)
	}
	return nil
}

func _CreateKeyValuesProofRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateKeyValuesProofRequest)
	switch tag {
	case 2: // trie_proof.proof_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TrieProof = &CreateKeyValuesProofRequest_ProofId{x}
		return true, err
	case 3: // trie_proof.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateTrieProofRequest)
		err := b.DecodeMessage(msg)
		m.TrieProof = &CreateKeyValuesProofRequest_Request{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateKeyValuesProofRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateKeyValuesProofRequest)
	// trie_proof
	switch x := m.TrieProof.(type) {
	case *CreateKeyValuesProofRequest_ProofId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ProofId)))
		n += len(x.ProofId)
	case *CreateKeyValuesProofRequest_Request:
		s := proto.Size(x.Request)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// VerifyKeyValuesProofRequest represents a verify key-values proof request
type VerifyKeyValuesProofRequest struct {
	// OutputKeyValues indicates whether to output key-values contained in the
	// trie
	OutputKeyValues bool `protobuf:"varint,1,opt,name=output_key_values,json=outputKeyValues,proto3" json:"output_key_values,omitempty"`
	// OutputDotGraph indicates whether to output a Graphviz dot graph to
	// visualize the trie
	OutputDotGraph       bool     `protobuf:"varint,2,opt,name=output_dot_graph,json=outputDotGraph,proto3" json:"output_dot_graph,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyKeyValuesProofRequest) Reset()         { *m = VerifyKeyValuesProofRequest{} }
func (m *VerifyKeyValuesProofRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyKeyValuesProofRequest) ProtoMessage()    {}
func (*VerifyKeyValuesProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{20}
}
func (m *VerifyKeyValuesProofRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyKeyValuesProofRequest.Unmarshal(m, b)
}
func (m *VerifyKeyValuesProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyKeyValuesProofRequest.Marshal(b, m, deterministic)
}
func (dst *VerifyKeyValuesProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyKeyValuesProofRequest.Merge(dst, src)
}
func (m *VerifyKeyValuesProofRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyKeyValuesProofRequest.Size(m)
}
func (m *VerifyKeyValuesProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyKeyValuesProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyKeyValuesProofRequest proto.InternalMessageInfo

func (m *VerifyKeyValuesProofRequest) GetOutputKeyValues() bool {
	if m != nil {
		return m.OutputKeyValues
	}
	return false
}

func (m *VerifyKeyValuesProofRequest) GetOutputDotGraph() bool {
	if m != nil {
		return m.OutputDotGraph
	}
	return false
}

// VerifyProofReply represents a verify proof reply
type VerifyProofReply struct {
	// Verified indicates whether the proof is verified
	Verified bool `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	// Error is the error message when the proof is falsified
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyProofReply) Reset()         { *m = VerifyProofReply{} }
func (m *VerifyProofReply) String() string { return proto.CompactTextString(m) }
func (*VerifyProofReply) ProtoMessage()    {}
func (*VerifyProofReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_519a13911e92cd67, []int{21}
}
func (m *VerifyProofReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyProofReply.Unmarshal(m, b)
}
func (m *VerifyProofReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyProofReply.Marshal(b, m, deterministic)
}
func (dst *VerifyProofReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyProofReply.Merge(dst, src)
}
func (m *VerifyProofReply) XXX_Size() int {
	return xxx_messageInfo_VerifyProofReply.Size(m)
}
func (m *VerifyProofReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyProofReply.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyProofReply proto.InternalMessageInfo

func (m *VerifyProofReply) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *VerifyProofReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Trie)(nil), "api.Trie")
	proto.RegisterType((*DataChunk)(nil), "api.DataChunk")
	proto.RegisterType((*KeyValue)(nil), "api.KeyValue")
	proto.RegisterType((*VerifyProofReplyChunk)(nil), "api.VerifyProofReplyChunk")
	proto.RegisterType((*Key)(nil), "api.Key")
	proto.RegisterType((*TrieRoot)(nil), "api.TrieRoot")
	proto.RegisterType((*TrieProof)(nil), "api.TrieProof")
	proto.RegisterType((*RootFilter)(nil), "api.RootFilter")
	proto.RegisterType((*KeyValuesFilter)(nil), "api.KeyValuesFilter")
	proto.RegisterType((*TrieRequest)(nil), "api.TrieRequest")
	proto.RegisterType((*TrieKeyValuesRequest)(nil), "api.TrieKeyValuesRequest")
	proto.RegisterType((*TrieKeyValueRequest)(nil), "api.TrieKeyValueRequest")
	proto.RegisterType((*TrieRootsRequest)(nil), "api.TrieRootsRequest")
	proto.RegisterType((*SetTrieRootRequest)(nil), "api.SetTrieRootRequest")
	proto.RegisterType((*TrieProofsRequest)(nil), "api.TrieProofsRequest")
	proto.RegisterType((*TrieProofRequest)(nil), "api.TrieProofRequest")
	proto.RegisterType((*CreateTrieProofRequest)(nil), "api.CreateTrieProofRequest")
	proto.RegisterType((*DeleteTrieProofRequest)(nil), "api.DeleteTrieProofRequest")
	proto.RegisterType((*VerifyTrieProofRequest)(nil), "api.VerifyTrieProofRequest")
	proto.RegisterType((*CreateKeyValuesProofRequest)(nil), "api.CreateKeyValuesProofRequest")
	proto.RegisterType((*VerifyKeyValuesProofRequest)(nil), "api.VerifyKeyValuesProofRequest")
	proto.RegisterType((*VerifyProofReply)(nil), "api.VerifyProofReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIServiceClient interface {
	// GetTries gets all tries. Admin privilege is required
	GetTries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (APIService_GetTriesClient, error)
	// GetTrie gets a trie
	GetTrie(ctx context.Context, in *TrieRequest, opts ...grpc.CallOption) (*Trie, error)
	// ImportTrie creates a new trie from existing trie data. If the trie ID is
	// not provided in the metadata, a new one will be generated
	ImportTrie(ctx context.Context, opts ...grpc.CallOption) (APIService_ImportTrieClient, error)
	// ExportTrie exports a trie's data
	ExportTrie(ctx context.Context, in *TrieRequest, opts ...grpc.CallOption) (APIService_ExportTrieClient, error)
	// CreateTrie creates an empty trie
	CreateTrie(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Trie, error)
	// DeleteTrie deletes a trie. This destroys everything of a trie
	DeleteTrie(ctx context.Context, in *TrieRequest, opts ...grpc.CallOption) (*Trie, error)
	// GetTrieKeyValues gets key-values of a trie. The returned KeyValues are
	// ordered by the keys alphabetically
	GetTrieKeyValues(ctx context.Context, in *TrieKeyValuesRequest, opts ...grpc.CallOption) (APIService_GetTrieKeyValuesClient, error)
	// GetTrieKeyValue gets a key-value of a trie
	GetTrieKeyValue(ctx context.Context, in *TrieKeyValueRequest, opts ...grpc.CallOption) (*KeyValue, error)
	// SetTrieKeyValues sets key-values of a trie. Set an empty value for a key to
	// remove that key. Modifications to a trie will change its root hash
	SetTrieKeyValues(ctx context.Context, opts ...grpc.CallOption) (APIService_SetTrieKeyValuesClient, error)
	// GetTrieRoots gets roots of a trie. This is a series of roots showing the
	// modification history of a trie
	GetTrieRoots(ctx context.Context, in *TrieRootsRequest, opts ...grpc.CallOption) (APIService_GetTrieRootsClient, error)
	// SetTrieRoot sets the root of a trie to the given one. This will add an
	// entry in the root history
	SetTrieRoot(ctx context.Context, in *SetTrieRootRequest, opts ...grpc.CallOption) (*Trie, error)
	// GetTrieProofs gets proofs of a trie
	GetTrieProofs(ctx context.Context, in *TrieProofsRequest, opts ...grpc.CallOption) (APIService_GetTrieProofsClient, error)
	// GetTrieProof gets a proof of a trie. When not_before is not provided
	// (either nil or zero), the latest proof will be returned
	GetTrieProof(ctx context.Context, in *TrieProofRequest, opts ...grpc.CallOption) (*TrieProof, error)
	// SubscribeTrieProof subscribes to proof changes of a trie. When not_before
	// is not provided (either nil or zero), the latest proof will be returned
	SubscribeTrieProof(ctx context.Context, in *TrieProofRequest, opts ...grpc.CallOption) (APIService_SubscribeTrieProofClient, error)
	// CreateTrieProof creates a proof for a trie root
	CreateTrieProof(ctx context.Context, in *CreateTrieProofRequest, opts ...grpc.CallOption) (*TrieProof, error)
	// DeleteTrieProof deletes a proof for a trie root
	DeleteTrieProof(ctx context.Context, in *DeleteTrieProofRequest, opts ...grpc.CallOption) (*TrieProof, error)
	// VerifyTrieProof verifies a proof for a trie root
	VerifyTrieProof(ctx context.Context, in *VerifyTrieProofRequest, opts ...grpc.CallOption) (APIService_VerifyTrieProofClient, error)
	// CreateKeyValuesProof creates a proof for the provided key-values out of a
	// trie proof. The new proof is self-contained and can be verified
	// independently
	CreateKeyValuesProof(ctx context.Context, in *CreateKeyValuesProofRequest, opts ...grpc.CallOption) (APIService_CreateKeyValuesProofClient, error)
	// VerifyKeyValuesProof verifies a key-values proof
	VerifyKeyValuesProof(ctx context.Context, opts ...grpc.CallOption) (APIService_VerifyKeyValuesProofClient, error)
}

type aPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewAPIServiceClient(cc *grpc.ClientConn) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) GetTries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (APIService_GetTriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[0], "/api.APIService/GetTries", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceGetTriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_GetTriesClient interface {
	Recv() (*Trie, error)
	grpc.ClientStream
}

type aPIServiceGetTriesClient struct {
	grpc.ClientStream
}

func (x *aPIServiceGetTriesClient) Recv() (*Trie, error) {
	m := new(Trie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) GetTrie(ctx context.Context, in *TrieRequest, opts ...grpc.CallOption) (*Trie, error) {
	out := new(Trie)
	err := c.cc.Invoke(ctx, "/api.APIService/GetTrie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ImportTrie(ctx context.Context, opts ...grpc.CallOption) (APIService_ImportTrieClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[1], "/api.APIService/ImportTrie", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceImportTrieClient{stream}
	return x, nil
}

type APIService_ImportTrieClient interface {
	Send(*DataChunk) error
	CloseAndRecv() (*Trie, error)
	grpc.ClientStream
}

type aPIServiceImportTrieClient struct {
	grpc.ClientStream
}

func (x *aPIServiceImportTrieClient) Send(m *DataChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIServiceImportTrieClient) CloseAndRecv() (*Trie, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Trie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) ExportTrie(ctx context.Context, in *TrieRequest, opts ...grpc.CallOption) (APIService_ExportTrieClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[2], "/api.APIService/ExportTrie", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceExportTrieClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_ExportTrieClient interface {
	Recv() (*DataChunk, error)
	grpc.ClientStream
}

type aPIServiceExportTrieClient struct {
	grpc.ClientStream
}

func (x *aPIServiceExportTrieClient) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) CreateTrie(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Trie, error) {
	out := new(Trie)
	err := c.cc.Invoke(ctx, "/api.APIService/CreateTrie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteTrie(ctx context.Context, in *TrieRequest, opts ...grpc.CallOption) (*Trie, error) {
	out := new(Trie)
	err := c.cc.Invoke(ctx, "/api.APIService/DeleteTrie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetTrieKeyValues(ctx context.Context, in *TrieKeyValuesRequest, opts ...grpc.CallOption) (APIService_GetTrieKeyValuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[3], "/api.APIService/GetTrieKeyValues", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceGetTrieKeyValuesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_GetTrieKeyValuesClient interface {
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type aPIServiceGetTrieKeyValuesClient struct {
	grpc.ClientStream
}

func (x *aPIServiceGetTrieKeyValuesClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) GetTrieKeyValue(ctx context.Context, in *TrieKeyValueRequest, opts ...grpc.CallOption) (*KeyValue, error) {
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, "/api.APIService/GetTrieKeyValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SetTrieKeyValues(ctx context.Context, opts ...grpc.CallOption) (APIService_SetTrieKeyValuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[4], "/api.APIService/SetTrieKeyValues", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceSetTrieKeyValuesClient{stream}
	return x, nil
}

type APIService_SetTrieKeyValuesClient interface {
	Send(*KeyValue) error
	CloseAndRecv() (*Trie, error)
	grpc.ClientStream
}

type aPIServiceSetTrieKeyValuesClient struct {
	grpc.ClientStream
}

func (x *aPIServiceSetTrieKeyValuesClient) Send(m *KeyValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIServiceSetTrieKeyValuesClient) CloseAndRecv() (*Trie, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Trie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) GetTrieRoots(ctx context.Context, in *TrieRootsRequest, opts ...grpc.CallOption) (APIService_GetTrieRootsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[5], "/api.APIService/GetTrieRoots", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceGetTrieRootsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_GetTrieRootsClient interface {
	Recv() (*TrieRoot, error)
	grpc.ClientStream
}

type aPIServiceGetTrieRootsClient struct {
	grpc.ClientStream
}

func (x *aPIServiceGetTrieRootsClient) Recv() (*TrieRoot, error) {
	m := new(TrieRoot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) SetTrieRoot(ctx context.Context, in *SetTrieRootRequest, opts ...grpc.CallOption) (*Trie, error) {
	out := new(Trie)
	err := c.cc.Invoke(ctx, "/api.APIService/SetTrieRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetTrieProofs(ctx context.Context, in *TrieProofsRequest, opts ...grpc.CallOption) (APIService_GetTrieProofsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[6], "/api.APIService/GetTrieProofs", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceGetTrieProofsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_GetTrieProofsClient interface {
	Recv() (*TrieProof, error)
	grpc.ClientStream
}

type aPIServiceGetTrieProofsClient struct {
	grpc.ClientStream
}

func (x *aPIServiceGetTrieProofsClient) Recv() (*TrieProof, error) {
	m := new(TrieProof)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) GetTrieProof(ctx context.Context, in *TrieProofRequest, opts ...grpc.CallOption) (*TrieProof, error) {
	out := new(TrieProof)
	err := c.cc.Invoke(ctx, "/api.APIService/GetTrieProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SubscribeTrieProof(ctx context.Context, in *TrieProofRequest, opts ...grpc.CallOption) (APIService_SubscribeTrieProofClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[7], "/api.APIService/SubscribeTrieProof", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceSubscribeTrieProofClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_SubscribeTrieProofClient interface {
	Recv() (*TrieProof, error)
	grpc.ClientStream
}

type aPIServiceSubscribeTrieProofClient struct {
	grpc.ClientStream
}

func (x *aPIServiceSubscribeTrieProofClient) Recv() (*TrieProof, error) {
	m := new(TrieProof)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) CreateTrieProof(ctx context.Context, in *CreateTrieProofRequest, opts ...grpc.CallOption) (*TrieProof, error) {
	out := new(TrieProof)
	err := c.cc.Invoke(ctx, "/api.APIService/CreateTrieProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteTrieProof(ctx context.Context, in *DeleteTrieProofRequest, opts ...grpc.CallOption) (*TrieProof, error) {
	out := new(TrieProof)
	err := c.cc.Invoke(ctx, "/api.APIService/DeleteTrieProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) VerifyTrieProof(ctx context.Context, in *VerifyTrieProofRequest, opts ...grpc.CallOption) (APIService_VerifyTrieProofClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[8], "/api.APIService/VerifyTrieProof", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceVerifyTrieProofClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_VerifyTrieProofClient interface {
	Recv() (*VerifyProofReplyChunk, error)
	grpc.ClientStream
}

type aPIServiceVerifyTrieProofClient struct {
	grpc.ClientStream
}

func (x *aPIServiceVerifyTrieProofClient) Recv() (*VerifyProofReplyChunk, error) {
	m := new(VerifyProofReplyChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) CreateKeyValuesProof(ctx context.Context, in *CreateKeyValuesProofRequest, opts ...grpc.CallOption) (APIService_CreateKeyValuesProofClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[9], "/api.APIService/CreateKeyValuesProof", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceCreateKeyValuesProofClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_CreateKeyValuesProofClient interface {
	Recv() (*DataChunk, error)
	grpc.ClientStream
}

type aPIServiceCreateKeyValuesProofClient struct {
	grpc.ClientStream
}

func (x *aPIServiceCreateKeyValuesProofClient) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) VerifyKeyValuesProof(ctx context.Context, opts ...grpc.CallOption) (APIService_VerifyKeyValuesProofClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[10], "/api.APIService/VerifyKeyValuesProof", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceVerifyKeyValuesProofClient{stream}
	return x, nil
}

type APIService_VerifyKeyValuesProofClient interface {
	Send(*DataChunk) error
	Recv() (*VerifyProofReplyChunk, error)
	grpc.ClientStream
}

type aPIServiceVerifyKeyValuesProofClient struct {
	grpc.ClientStream
}

func (x *aPIServiceVerifyKeyValuesProofClient) Send(m *DataChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIServiceVerifyKeyValuesProofClient) Recv() (*VerifyProofReplyChunk, error) {
	m := new(VerifyProofReplyChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServiceServer is the server API for APIService service.
type APIServiceServer interface {
	// GetTries gets all tries. Admin privilege is required
	GetTries(*empty.Empty, APIService_GetTriesServer) error
	// GetTrie gets a trie
	GetTrie(context.Context, *TrieRequest) (*Trie, error)
	// ImportTrie creates a new trie from existing trie data. If the trie ID is
	// not provided in the metadata, a new one will be generated
	ImportTrie(APIService_ImportTrieServer) error
	// ExportTrie exports a trie's data
	ExportTrie(*TrieRequest, APIService_ExportTrieServer) error
	// CreateTrie creates an empty trie
	CreateTrie(context.Context, *empty.Empty) (*Trie, error)
	// DeleteTrie deletes a trie. This destroys everything of a trie
	DeleteTrie(context.Context, *TrieRequest) (*Trie, error)
	// GetTrieKeyValues gets key-values of a trie. The returned KeyValues are
	// ordered by the keys alphabetically
	GetTrieKeyValues(*TrieKeyValuesRequest, APIService_GetTrieKeyValuesServer) error
	// GetTrieKeyValue gets a key-value of a trie
	GetTrieKeyValue(context.Context, *TrieKeyValueRequest) (*KeyValue, error)
	// SetTrieKeyValues sets key-values of a trie. Set an empty value for a key to
	// remove that key. Modifications to a trie will change its root hash
	SetTrieKeyValues(APIService_SetTrieKeyValuesServer) error
	// GetTrieRoots gets roots of a trie. This is a series of roots showing the
	// modification history of a trie
	GetTrieRoots(*TrieRootsRequest, APIService_GetTrieRootsServer) error
	// SetTrieRoot sets the root of a trie to the given one. This will add an
	// entry in the root history
	SetTrieRoot(context.Context, *SetTrieRootRequest) (*Trie, error)
	// GetTrieProofs gets proofs of a trie
	GetTrieProofs(*TrieProofsRequest, APIService_GetTrieProofsServer) error
	// GetTrieProof gets a proof of a trie. When not_before is not provided
	// (either nil or zero), the latest proof will be returned
	GetTrieProof(context.Context, *TrieProofRequest) (*TrieProof, error)
	// SubscribeTrieProof subscribes to proof changes of a trie. When not_before
	// is not provided (either nil or zero), the latest proof will be returned
	SubscribeTrieProof(*TrieProofRequest, APIService_SubscribeTrieProofServer) error
	// CreateTrieProof creates a proof for a trie root
	CreateTrieProof(context.Context, *CreateTrieProofRequest) (*TrieProof, error)
	// DeleteTrieProof deletes a proof for a trie root
	DeleteTrieProof(context.Context, *DeleteTrieProofRequest) (*TrieProof, error)
	// VerifyTrieProof verifies a proof for a trie root
	VerifyTrieProof(*VerifyTrieProofRequest, APIService_VerifyTrieProofServer) error
	// CreateKeyValuesProof creates a proof for the provided key-values out of a
	// trie proof. The new proof is self-contained and can be verified
	// independently
	CreateKeyValuesProof(*CreateKeyValuesProofRequest, APIService_CreateKeyValuesProofServer) error
	// VerifyKeyValuesProof verifies a key-values proof
	VerifyKeyValuesProof(APIService_VerifyKeyValuesProofServer) error
}

func RegisterAPIServiceServer(s *grpc.Server, srv APIServiceServer) {
	s.RegisterService(&_APIService_serviceDesc, srv)
}

func _APIService_GetTries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).GetTries(m, &aPIServiceGetTriesServer{stream})
}

type APIService_GetTriesServer interface {
	Send(*Trie) error
	grpc.ServerStream
}

type aPIServiceGetTriesServer struct {
	grpc.ServerStream
}

func (x *aPIServiceGetTriesServer) Send(m *Trie) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_GetTrie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetTrie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/GetTrie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetTrie(ctx, req.(*TrieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ImportTrie_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServiceServer).ImportTrie(&aPIServiceImportTrieServer{stream})
}

type APIService_ImportTrieServer interface {
	SendAndClose(*Trie) error
	Recv() (*DataChunk, error)
	grpc.ServerStream
}

type aPIServiceImportTrieServer struct {
	grpc.ServerStream
}

func (x *aPIServiceImportTrieServer) SendAndClose(m *Trie) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIServiceImportTrieServer) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _APIService_ExportTrie_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrieRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).ExportTrie(m, &aPIServiceExportTrieServer{stream})
}

type APIService_ExportTrieServer interface {
	Send(*DataChunk) error
	grpc.ServerStream
}

type aPIServiceExportTrieServer struct {
	grpc.ServerStream
}

func (x *aPIServiceExportTrieServer) Send(m *DataChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_CreateTrie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateTrie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/CreateTrie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateTrie(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteTrie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteTrie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/DeleteTrie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteTrie(ctx, req.(*TrieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetTrieKeyValues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrieKeyValuesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).GetTrieKeyValues(m, &aPIServiceGetTrieKeyValuesServer{stream})
}

type APIService_GetTrieKeyValuesServer interface {
	Send(*KeyValue) error
	grpc.ServerStream
}

type aPIServiceGetTrieKeyValuesServer struct {
	grpc.ServerStream
}

func (x *aPIServiceGetTrieKeyValuesServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_GetTrieKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrieKeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetTrieKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/GetTrieKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetTrieKeyValue(ctx, req.(*TrieKeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SetTrieKeyValues_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServiceServer).SetTrieKeyValues(&aPIServiceSetTrieKeyValuesServer{stream})
}

type APIService_SetTrieKeyValuesServer interface {
	SendAndClose(*Trie) error
	Recv() (*KeyValue, error)
	grpc.ServerStream
}

type aPIServiceSetTrieKeyValuesServer struct {
	grpc.ServerStream
}

func (x *aPIServiceSetTrieKeyValuesServer) SendAndClose(m *Trie) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIServiceSetTrieKeyValuesServer) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _APIService_GetTrieRoots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrieRootsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).GetTrieRoots(m, &aPIServiceGetTrieRootsServer{stream})
}

type APIService_GetTrieRootsServer interface {
	Send(*TrieRoot) error
	grpc.ServerStream
}

type aPIServiceGetTrieRootsServer struct {
	grpc.ServerStream
}

func (x *aPIServiceGetTrieRootsServer) Send(m *TrieRoot) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_SetTrieRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrieRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SetTrieRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/SetTrieRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SetTrieRoot(ctx, req.(*SetTrieRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetTrieProofs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrieProofsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).GetTrieProofs(m, &aPIServiceGetTrieProofsServer{stream})
}

type APIService_GetTrieProofsServer interface {
	Send(*TrieProof) error
	grpc.ServerStream
}

type aPIServiceGetTrieProofsServer struct {
	grpc.ServerStream
}

func (x *aPIServiceGetTrieProofsServer) Send(m *TrieProof) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_GetTrieProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrieProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetTrieProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/GetTrieProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetTrieProof(ctx, req.(*TrieProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SubscribeTrieProof_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrieProofRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).SubscribeTrieProof(m, &aPIServiceSubscribeTrieProofServer{stream})
}

type APIService_SubscribeTrieProofServer interface {
	Send(*TrieProof) error
	grpc.ServerStream
}

type aPIServiceSubscribeTrieProofServer struct {
	grpc.ServerStream
}

func (x *aPIServiceSubscribeTrieProofServer) Send(m *TrieProof) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_CreateTrieProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrieProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateTrieProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/CreateTrieProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateTrieProof(ctx, req.(*CreateTrieProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteTrieProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrieProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteTrieProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/DeleteTrieProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteTrieProof(ctx, req.(*DeleteTrieProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_VerifyTrieProof_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VerifyTrieProofRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).VerifyTrieProof(m, &aPIServiceVerifyTrieProofServer{stream})
}

type APIService_VerifyTrieProofServer interface {
	Send(*VerifyProofReplyChunk) error
	grpc.ServerStream
}

type aPIServiceVerifyTrieProofServer struct {
	grpc.ServerStream
}

func (x *aPIServiceVerifyTrieProofServer) Send(m *VerifyProofReplyChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_CreateKeyValuesProof_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateKeyValuesProofRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).CreateKeyValuesProof(m, &aPIServiceCreateKeyValuesProofServer{stream})
}

type APIService_CreateKeyValuesProofServer interface {
	Send(*DataChunk) error
	grpc.ServerStream
}

type aPIServiceCreateKeyValuesProofServer struct {
	grpc.ServerStream
}

func (x *aPIServiceCreateKeyValuesProofServer) Send(m *DataChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_VerifyKeyValuesProof_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServiceServer).VerifyKeyValuesProof(&aPIServiceVerifyKeyValuesProofServer{stream})
}

type APIService_VerifyKeyValuesProofServer interface {
	Send(*VerifyProofReplyChunk) error
	Recv() (*DataChunk, error)
	grpc.ServerStream
}

type aPIServiceVerifyKeyValuesProofServer struct {
	grpc.ServerStream
}

func (x *aPIServiceVerifyKeyValuesProofServer) Send(m *VerifyProofReplyChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIServiceVerifyKeyValuesProofServer) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _APIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrie",
			Handler:    _APIService_GetTrie_Handler,
		},
		{
			MethodName: "CreateTrie",
			Handler:    _APIService_CreateTrie_Handler,
		},
		{
			MethodName: "DeleteTrie",
			Handler:    _APIService_DeleteTrie_Handler,
		},
		{
			MethodName: "GetTrieKeyValue",
			Handler:    _APIService_GetTrieKeyValue_Handler,
		},
		{
			MethodName: "SetTrieRoot",
			Handler:    _APIService_SetTrieRoot_Handler,
		},
		{
			MethodName: "GetTrieProof",
			Handler:    _APIService_GetTrieProof_Handler,
		},
		{
			MethodName: "CreateTrieProof",
			Handler:    _APIService_CreateTrieProof_Handler,
		},
		{
			MethodName: "DeleteTrieProof",
			Handler:    _APIService_DeleteTrieProof_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTries",
			Handler:       _APIService_GetTries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImportTrie",
			Handler:       _APIService_ImportTrie_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExportTrie",
			Handler:       _APIService_ExportTrie_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrieKeyValues",
			Handler:       _APIService_GetTrieKeyValues_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetTrieKeyValues",
			Handler:       _APIService_SetTrieKeyValues_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTrieRoots",
			Handler:       _APIService_GetTrieRoots_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrieProofs",
			Handler:       _APIService_GetTrieProofs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTrieProof",
			Handler:       _APIService_SubscribeTrieProof_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VerifyTrieProof",
			Handler:       _APIService_VerifyTrieProof_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateKeyValuesProof",
			Handler:       _APIService_CreateKeyValuesProof_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VerifyKeyValuesProof",
			Handler:       _APIService_VerifyKeyValuesProof_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_api_519a13911e92cd67) }

var fileDescriptor_api_519a13911e92cd67 = []byte{
	// 1321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x2d, 0x5b, 0x3f, 0x23, 0xc9, 0x52, 0x36, 0xb2, 0xad, 0xc8, 0x2d, 0xa2, 0xf2, 0x10,
	0x08, 0x69, 0x2a, 0x3b, 0x4a, 0x83, 0xa4, 0x68, 0x81, 0xc6, 0x8a, 0xd3, 0xc8, 0x48, 0x10, 0x04,
	0x54, 0x1a, 0xa0, 0x2d, 0x5a, 0x82, 0x92, 0x56, 0x16, 0x21, 0x8b, 0xcb, 0xac, 0x96, 0xae, 0x89,
	0x9e, 0xfb, 0x22, 0xbd, 0xf6, 0x9e, 0x67, 0xe8, 0xa1, 0xcf, 0xd2, 0x67, 0x28, 0xf6, 0x87, 0x3f,
	0xa2, 0xa8, 0xc4, 0x36, 0xda, 0x13, 0xc9, 0xd9, 0x6f, 0x67, 0xbe, 0x99, 0x9d, 0x9f, 0x25, 0x54,
	0x2c, 0xd7, 0x3e, 0xb0, 0x5c, 0xbb, 0xe3, 0x52, 0xc2, 0x08, 0xca, 0x5a, 0xae, 0xdd, 0xdc, 0x3f,
	0x25, 0xe4, 0xf4, 0x0c, 0x1f, 0x08, 0xd1, 0xd0, 0x9b, 0x1c, 0xe0, 0xb9, 0xcb, 0x7c, 0x89, 0x68,
	0xde, 0x4e, 0x2e, 0x32, 0x7b, 0x8e, 0x17, 0xcc, 0x9a, 0xbb, 0x0a, 0x70, 0xd3, 0x72, 0x46, 0x53,
	0x42, 0x0f, 0xe4, 0x43, 0x0a, 0xf5, 0xbb, 0xb0, 0xf9, 0x86, 0xda, 0x18, 0x6d, 0xc3, 0x86, 0x3d,
	0x6e, 0x68, 0x2d, 0xad, 0x5d, 0x34, 0x36, 0xec, 0x31, 0x42, 0xb0, 0x49, 0x09, 0x61, 0x8d, 0x0d,
	0x21, 0x11, 0xef, 0xfa, 0xdf, 0x1a, 0x14, 0x8f, 0x2d, 0x66, 0x3d, 0x9d, 0x7a, 0xce, 0x8c, 0x23,
	0xc6, 0x16, 0xb3, 0xc4, 0x9e, 0xb2, 0x21, 0xde, 0xd1, 0x43, 0x28, 0x33, 0x6a, 0x63, 0x93, 0xe2,
	0x77, 0x1e, 0x5e, 0xc8, 0xdd, 0xa5, 0x6e, 0xad, 0xc3, 0xfd, 0xe0, 0x66, 0x0c, 0x29, 0xef, 0x67,
	0x8c, 0x12, 0x8b, 0x3e, 0xd1, 0x14, 0x6e, 0x9f, 0x63, 0x6a, 0x4f, 0x7c, 0x73, 0x86, 0x7d, 0xf3,
	0xdc, 0x3a, 0xf3, 0xf0, 0xc2, 0x74, 0x29, 0x21, 0x93, 0x50, 0x53, 0x56, 0x68, 0x6a, 0x09, 0x4d,
	0x6f, 0x05, 0xf6, 0x05, 0xf6, 0xdf, 0x0a, 0xe4, 0x6b, 0x0e, 0x8c, 0x34, 0xef, 0x9f, 0xaf, 0x5f,
	0xee, 0x01, 0x14, 0xe6, 0x98, 0x59, 0x9c, 0xac, 0xfe, 0xa7, 0x06, 0x85, 0x00, 0x85, 0x6a, 0x90,
	0x9d, 0x61, 0x5f, 0x39, 0xc3, 0x5f, 0xd1, 0x1e, 0xe4, 0x39, 0x9b, 0x05, 0x76, 0x1b, 0x1b, 0xad,
	0x6c, 0xbb, 0x62, 0xe4, 0x66, 0xd8, 0x1f, 0x60, 0x17, 0xd5, 0x61, 0x4b, 0x50, 0x14, 0x9c, 0xca,
	0x86, 0xfc, 0x40, 0x06, 0xec, 0x09, 0xd7, 0x63, 0x1e, 0x04, 0xdc, 0x37, 0x05, 0xf7, 0x5b, 0x61,
	0x14, 0x42, 0x6a, 0x11, 0xe9, 0x3a, 0x4b, 0x91, 0x2f, 0xb1, 0x7d, 0xaf, 0xc1, 0x8e, 0x74, 0x5c,
	0x39, 0xe4, 0x9e, 0xf9, 0xf2, 0x20, 0xee, 0x41, 0x31, 0x34, 0x2a, 0x1c, 0x28, 0x75, 0x2b, 0xc2,
	0x56, 0xa0, 0xaf, 0x9f, 0x31, 0x0a, 0xb3, 0xc0, 0xd1, 0xc7, 0x50, 0x1d, 0x13, 0x66, 0x9e, 0x52,
	0xcb, 0x9d, 0x9a, 0x23, 0xae, 0x40, 0x9d, 0xd2, 0xb6, 0xd8, 0x13, 0x9e, 0x6f, 0x3f, 0x63, 0x54,
	0xc6, 0x84, 0x3d, 0xe7, 0x38, 0x69, 0xe7, 0x0b, 0xd8, 0xa2, 0xdc, 0xaa, 0x3a, 0x8b, 0x9d, 0xd8,
	0x59, 0x44, 0x94, 0xfa, 0x19, 0x43, 0xa2, 0x7a, 0x39, 0x99, 0x1f, 0xfa, 0x21, 0x64, 0x5f, 0x60,
	0xff, 0x0a, 0x01, 0xd6, 0x7f, 0x80, 0x82, 0x48, 0x16, 0x42, 0x58, 0x98, 0x87, 0x5a, 0x94, 0x87,
	0xe8, 0x2b, 0x80, 0x11, 0xc5, 0x16, 0xc3, 0x63, 0xd3, 0x0a, 0x72, 0xac, 0xd9, 0x91, 0xe9, 0xdf,
	0x09, 0xd2, 0xbf, 0xf3, 0x26, 0x48, 0x7f, 0xa3, 0xa8, 0xd0, 0x47, 0x4c, 0x7f, 0x9f, 0x85, 0x22,
	0xd7, 0x2d, 0x08, 0xaf, 0x24, 0xfd, 0x1e, 0xe4, 0xc5, 0x19, 0xda, 0x63, 0x95, 0xf7, 0x39, 0xfe,
	0x79, 0x12, 0x55, 0x43, 0x76, 0x2d, 0x8b, 0xcd, 0x2b, 0xb0, 0x40, 0xf7, 0x20, 0xb7, 0x60, 0x16,
	0xf3, 0x16, 0x8d, 0xad, 0x96, 0xd6, 0xde, 0xee, 0xd6, 0x3b, 0xaa, 0x26, 0x7b, 0x16, 0x1b, 0x4d,
	0x3b, 0x03, 0xb1, 0x66, 0x28, 0x0c, 0xcf, 0x37, 0x4c, 0x29, 0xa1, 0x8d, 0x9c, 0xb0, 0x2e, 0x3f,
	0xd0, 0x97, 0x50, 0x92, 0x9b, 0x4c, 0xe6, 0xbb, 0xb8, 0x91, 0x17, 0x8a, 0x6e, 0x06, 0x8a, 0x8e,
	0xe4, 0xe3, 0x8d, 0xef, 0x62, 0x03, 0xa4, 0x8c, 0xbf, 0xa3, 0x1d, 0xc8, 0xb1, 0x0b, 0x87, 0x3b,
	0x58, 0x90, 0xca, 0xd8, 0x85, 0x73, 0x22, 0x1d, 0xbf, 0x70, 0x4c, 0x8f, 0xda, 0x8d, 0xb2, 0x72,
	0xfc, 0xc2, 0xf9, 0x9e, 0xda, 0xe8, 0x53, 0x80, 0xe1, 0x19, 0x19, 0xcd, 0x4c, 0xde, 0x4c, 0x1a,
	0xc5, 0x96, 0xd6, 0xde, 0x34, 0x8a, 0x42, 0xc2, 0x1d, 0x43, 0x77, 0xa0, 0x1a, 0x2d, 0x9b, 0x8e,
	0xe5, 0x90, 0x46, 0x45, 0x60, 0x2a, 0x21, 0xe6, 0x95, 0xe5, 0x10, 0xf4, 0x19, 0x94, 0x25, 0xce,
	0xf1, 0xe6, 0x43, 0x4c, 0x1b, 0x20, 0x40, 0x25, 0x21, 0x7b, 0x25, 0x44, 0xdc, 0x92, 0xaa, 0x78,
	0x1e, 0xe8, 0x92, 0x60, 0x51, 0x14, 0x12, 0x9e, 0x07, 0xfa, 0x4f, 0x00, 0xfc, 0xf9, 0x9d, 0x7d,
	0xc6, 0x30, 0x5d, 0x97, 0x15, 0x0e, 0x61, 0xe6, 0x10, 0x4f, 0x08, 0xc5, 0x97, 0xc9, 0x0a, 0x87,
	0xb0, 0x9e, 0x00, 0xeb, 0x07, 0x50, 0x0d, 0x6b, 0x4f, 0x59, 0xf8, 0x04, 0x36, 0x67, 0xd8, 0x5f,
	0x34, 0xb4, 0x56, 0xb6, 0x5d, 0xea, 0x16, 0x82, 0x7a, 0x32, 0x84, 0x54, 0xbf, 0x03, 0xa5, 0x58,
	0x3b, 0x8b, 0xe7, 0x8d, 0x16, 0xcf, 0x1b, 0xfd, 0x29, 0xd4, 0xd3, 0x0a, 0x7e, 0xed, 0x86, 0xd4,
	0xb6, 0xfb, 0x0b, 0xdc, 0x8c, 0x2b, 0xb9, 0x8e, 0x0e, 0xd4, 0x94, 0xd5, 0x27, 0x2b, 0x37, 0xf2,
	0x86, 0x0b, 0xf5, 0x9f, 0xa1, 0x16, 0x94, 0xdb, 0xc7, 0x09, 0x1e, 0x42, 0x89, 0x2b, 0x34, 0x27,
	0x22, 0x4c, 0x2a, 0xcc, 0x55, 0xa1, 0x30, 0x3a, 0x1f, 0x03, 0x68, 0xf8, 0xae, 0x1f, 0x01, 0x1a,
	0x60, 0x16, 0x58, 0xb8, 0x66, 0x04, 0x6e, 0x84, 0x45, 0xfb, 0x7f, 0x50, 0xfc, 0x5d, 0x93, 0x21,
	0x88, 0x8f, 0x8a, 0xf5, 0xfa, 0xf7, 0xa1, 0x20, 0x33, 0x35, 0x68, 0x13, 0xfd, 0x8c, 0x91, 0x17,
	0x92, 0x93, 0x31, 0xea, 0x2e, 0x1b, 0xcf, 0xa6, 0x1a, 0xef, 0x67, 0xe2, 0xe6, 0x7b, 0x79, 0xd8,
	0x7a, 0xe7, 0x61, 0xea, 0xeb, 0xbf, 0xc1, 0xee, 0x53, 0xd1, 0x24, 0x2e, 0x4f, 0x26, 0xed, 0xb0,
	0x13, 0xad, 0x21, 0x7b, 0xa9, 0xd6, 0xa0, 0xbf, 0x84, 0xdd, 0x63, 0x7c, 0x86, 0xaf, 0x62, 0xfc,
	0x56, 0x32, 0x12, 0x61, 0x1c, 0xf4, 0x3f, 0x34, 0xd8, 0x95, 0xb3, 0xe1, 0xbf, 0x50, 0x87, 0xee,
	0xc2, 0x0d, 0xe2, 0x31, 0xd7, 0x63, 0xb1, 0xf9, 0x2a, 0x1c, 0x2b, 0x18, 0x55, 0xb9, 0x10, 0xd6,
	0x18, 0x6a, 0x43, 0x4d, 0x61, 0xc3, 0x41, 0x27, 0xda, 0x73, 0xc1, 0xd8, 0x96, 0xf2, 0x63, 0x35,
	0xd6, 0xf4, 0xbf, 0x34, 0xd8, 0x97, 0x01, 0x4f, 0xbd, 0x2d, 0x5c, 0x33, 0x05, 0x1e, 0x41, 0x7e,
	0xf9, 0xd6, 0xb2, 0x2f, 0x8e, 0x3f, 0xfd, 0x64, 0xf9, 0x46, 0x85, 0xe6, 0x63, 0x41, 0xa5, 0x8d,
	0x9c, 0x26, 0xf5, 0xa5, 0x29, 0xae, 0x3a, 0x93, 0xa1, 0x30, 0xbd, 0x32, 0x80, 0x20, 0x27, 0xcc,
	0xea, 0x0b, 0xd8, 0xff, 0xc0, 0xb5, 0x28, 0x3d, 0x7e, 0xda, 0xe5, 0xe3, 0xb7, 0x91, 0x1a, 0xbf,
	0x63, 0xa8, 0x25, 0xe7, 0x3f, 0x6a, 0x42, 0x41, 0x5c, 0xc0, 0x6c, 0x3c, 0x56, 0x06, 0xc2, 0xef,
	0x68, 0x92, 0x6d, 0xc4, 0x26, 0x59, 0xf7, 0x9f, 0x02, 0xc0, 0xd1, 0xeb, 0x93, 0x01, 0xa6, 0xe7,
	0xf6, 0x08, 0xa3, 0xfb, 0x50, 0x78, 0x2e, 0xfb, 0xc5, 0x02, 0xed, 0xae, 0xf4, 0xef, 0x67, 0xfc,
	0xc6, 0xdb, 0x2c, 0x86, 0x77, 0x29, 0x3d, 0x73, 0xa8, 0xa1, 0x36, 0xe4, 0xd5, 0x16, 0xb4, 0x72,
	0xd7, 0x5c, 0xc2, 0xa2, 0xcf, 0x01, 0x4e, 0xe6, 0x2e, 0xa1, 0x12, 0x9c, 0xb8, 0xf2, 0x2c, 0x41,
	0xdb, 0x1a, 0xea, 0x02, 0x3c, 0xbb, 0x08, 0xc1, 0xab, 0x9a, 0x13, 0xdb, 0x05, 0x95, 0xfb, 0x00,
	0xd1, 0x41, 0x5f, 0x8a, 0x3f, 0xe7, 0x14, 0x15, 0xde, 0xc7, 0x1c, 0x78, 0x02, 0x35, 0xe5, 0x6a,
	0x74, 0x60, 0xeb, 0x6f, 0x96, 0xcd, 0xe5, 0x8b, 0xa0, 0x60, 0xf8, 0x0d, 0x54, 0x13, 0x1a, 0x50,
	0x63, 0x45, 0xc1, 0xba, 0xfd, 0xe8, 0x10, 0x6a, 0x83, 0xa4, 0xfd, 0x65, 0x50, 0x32, 0x8a, 0x8f,
	0xa1, 0xfc, 0x3c, 0xea, 0xff, 0x0b, 0xb4, 0x13, 0x39, 0x18, 0x9b, 0x38, 0xca, 0x52, 0x20, 0x16,
	0x4c, 0x1f, 0x40, 0x29, 0x36, 0x39, 0xd0, 0x9e, 0x40, 0xac, 0xce, 0x92, 0xe5, 0x00, 0x7d, 0x0d,
	0x15, 0x65, 0x4e, 0x8e, 0x0b, 0xb4, 0x1b, 0xae, 0x2e, 0xcd, 0x0f, 0x75, 0x7a, 0xa1, 0x5c, 0x58,
	0x7c, 0x14, 0x72, 0x95, 0x17, 0xc4, 0x9d, 0x65, 0xcc, 0xda, 0xad, 0xe8, 0x5b, 0x40, 0x03, 0x6f,
	0xb8, 0x18, 0x51, 0x7b, 0x88, 0xaf, 0xbe, 0xfd, 0x50, 0x43, 0x4f, 0xa0, 0x9a, 0x68, 0x10, 0xe8,
	0x43, 0x6d, 0x23, 0x85, 0xc2, 0x13, 0xa8, 0x26, 0xfa, 0xb7, 0xd2, 0x90, 0xde, 0xd5, 0x53, 0x34,
	0xbc, 0x82, 0x6a, 0xa2, 0x65, 0x2b, 0x0d, 0xe9, 0x8d, 0xbc, 0xd9, 0x4c, 0xfd, 0x03, 0x88, 0x6a,
	0xe1, 0x25, 0xd4, 0xd3, 0xba, 0x2b, 0x6a, 0xc5, 0x1c, 0x4b, 0x6d, 0x57, 0xa9, 0x95, 0xd5, 0x87,
	0x7a, 0x5a, 0x87, 0x5b, 0x29, 0xe2, 0x0f, 0xb2, 0x6a, 0x6b, 0x87, 0x5a, 0xef, 0xd1, 0x8f, 0x0f,
	0x4f, 0x6d, 0x36, 0xf5, 0x86, 0x9d, 0x11, 0x99, 0x1f, 0x0c, 0x88, 0xc7, 0xa6, 0x43, 0xcb, 0x99,
	0x0d, 0xc8, 0x84, 0xfd, 0x6a, 0x51, 0xf1, 0x07, 0x4d, 0x26, 0xd6, 0x90, 0xff, 0x4b, 0xcf, 0x4e,
	0xe5, 0xff, 0xf4, 0x82, 0xff, 0x8a, 0x0f, 0x73, 0xe2, 0xfd, 0xc1, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xde, 0x0f, 0x61, 0xf5, 0x9c, 0x0f, 0x00, 0x00,
}
