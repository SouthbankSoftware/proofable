/*
 * @Author: guiguan
 * @Date:   2019-08-05T10:53:28+10:00
 * @Last modified by:   guiguan
 * @Last modified time: 2020-03-18T13:35:43+11:00
 */

syntax = "proto3";

option go_package = "github.com/SouthbankSoftware/provenx-cli/pkg/protos/anchor";
option java_multiple_files = true;
option java_package = "com.provendb.anchor.proto";
option java_outer_classname = "AnchorProto";
option objc_class_prefix = "ACH";

package anchor;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

/**
 * ProvenDB Anchor Service gRPC API
 */
service AnchorService {
  // get all anchors
  rpc GetAnchors(google.protobuf.Empty) returns (stream Anchor) {}
  // get an anchor
  rpc GetAnchor(AnchorRequest) returns (Anchor) {}
  // get a proof
  rpc GetProof(ProofRequest) returns (Proof) {}
  // submit a proof for the given hash
  rpc SubmitProof(SubmitProofRequest) returns (Proof) {}
  // verify the given proof. When the proof is unverifiable, an exception is
  // thrown
  rpc VerifyProof(VerifyProofRequest) returns (VerifyProofReply) {}
  // get a batch
  rpc GetBatch(BatchRequest) returns (Batch) {}
  // subscribe to batches
  rpc SubscribeBatches(SubscribeBatchesRequest) returns (stream Batch) {}
}

/**
 * Anchor request
 */
message AnchorRequest {
  // anchor type
  Anchor.Type type = 1;
}

/**
 * Anchor detail
 */
message Anchor {
  enum Type {
    // ethereum
    ETH = 0;
    // ethereum mainnet
    ETH_MAINNET = 3;
    // ethereum elastos
    ETH_ELASTOS = 4;
    // bitcoin
    BTC = 1;
    // bitcoin mainnet
    BTC_MAINNET = 5;
    // chainpoint
    CHP = 2;
  }
  // anchor type
  Type type = 1;
  enum Status {
    // error
    ERROR = 0;
    // stopped
    STOPPED = 1;
    // running
    RUNNING = 2;
  }
  // anchor status
  Status status = 2;
  // the error message when status is ERROR
  string error = 3;
  // supported proof formats
  repeated Proof.Format supported_formats = 4;
}

/**
 * Submit proof request
 */
message SubmitProofRequest {
  // hash to be submitted
  string hash = 1;
  // anchor type
  Anchor.Type anchor_type = 2;
  // proof format
  Proof.Format format = 3;
  // whether to skip batching and submit a proof for the hash directly
  bool skip_batching = 4;
  // whether to include the batch detail in the reply
  bool with_batch = 5;
}

/**
 * Batch request
 */
message BatchRequest {
  // batch ID
  string batch_id = 1;
  // anchor type
  Anchor.Type anchor_type = 2;
}

/**
 * Subscribe batches request
 */
message SubscribeBatchesRequest {
  // batch filter. When nil, all batches will be subscribed; otherwise, only the
  // given anchor's batches will be subscribed; if batch_id is non-empty, only
  // the matched batch will be subscribed
  BatchRequest filter = 1;
}

/**
 * Batch detail
 */
message Batch {
  // batch ID
  string id = 1;
  // anchor type
  Anchor.Type anchor_type = 2;
  // proof format. It determines how the merkle tree is constructed for the
  // batch.
  Proof.Format proof_format = 3;
  enum Status {
    // error. FLOW: * -> ERROR
    ERROR = 0;
    // batching for more hashes. FLOW: created_at -> BATCHING -> flushed_at
    BATCHING = 1;
    // queuing to be processed. FLOW: flushed_at -> QUEUING -> started_at
    QUEUING = 2;
    // constructing the merkle roots and submitting hashes. FLOW: started_at ->
    // PROCESSING -> submitted_at
    PROCESSING = 3;
    // batch root hash is pending to be confirmed. FLOW: submitted_at -> PENDING
    // -> finalized_at
    PENDING = 4;
    // batch root hash is confirmed by the anchor. FLOW: finalized_at ->
    // CONFIRMED
    CONFIRMED = 5;
  }
  // batch status. FLOW: created_at -> BATCHING -> flushed_at -> QUEUING ->
  // started_at -> PROCESSING -> submitted_at -> PENDING -> finalized_at ->
  // CONFIRMED / ERROR; * -> ERROR; when a batch has not yet reached PENDING and
  // its anchor has restarted, it will be put back to QUEUING
  Status status = 4;
  // error message when status is ERROR
  string error = 5;
  // number of hashes
  int64 size = 6;
  // created at timestamp. FLOW: created_at -> BATCHING
  google.protobuf.Timestamp created_at = 7;
  // flushed at timestamp. FLOW: BATCHING -> flushed_at -> QUEUING
  google.protobuf.Timestamp flushed_at = 8;
  // started at timestamp. FLOW: QUEUING -> started_at -> PROCESSING
  google.protobuf.Timestamp started_at = 9;
  // submitted at timestamp. FLOW: PROCESSING -> submitted_at -> PENDING
  google.protobuf.Timestamp submitted_at = 10;
  // finalized at timestamp. FLOW: * -> finalized_at -> CONFIRMED / ERROR. NOTE:
  // this is not the real block confirmed time, use the timestamp in the batch
  // data instead.
  google.protobuf.Timestamp finalized_at = 11;
  // batch root hash
  string hash = 12;
  // batch data in JSON
  string data = 13;
}

/**
 * Proof request
 */
message ProofRequest {
  // proof hash
  string hash = 1;
  // proof batch ID
  string batch_id = 2;
  // anchor type
  Anchor.Type anchor_type = 3;
  // whether to include the proof's batch detail
  bool with_batch = 4;
}

/**
 * Proof detail
 */
message Proof {
  // proof hash
  string hash = 1;
  // proof's batch ID
  string batch_id = 2;
  // anchor type
  Anchor.Type anchor_type = 3;
  // proof status
  Batch.Status batch_status = 4;
  enum Format {
    // chainpoint path
    CHP_PATH = 0;
    // ethereum trie
    ETH_TRIE = 1;
    // signed chainpoint path
    CHP_PATH_SIGNED = 2;
    // signed ethereum trie
    ETH_TRIE_SIGNED = 3;
  }
  // proof format
  Format format = 5;
  // proof data in base64
  string data = 6;
  // proof's batch detail
  Batch batch = 7;
}

/**
 * Verify proof request
 */
message VerifyProofRequest {
  // anchor type
  Anchor.Type anchor_type = 1;
  // proof format. If skipping the signature checking is desired, please use the
  // corresponding non-signed format, eg. use CHP_PATH instead of
  // CHP_PATH_SIGNED in request
  Proof.Format format = 2;
  // proof data in base64
  string data = 3;
}

/**
 * Verify proof reply
 */
message VerifyProofReply {
  // whether the proof is verified
  bool verified = 1;
  // the error message when the proof is falsified
  string error = 2;
  // provenHash is the hash that is proven by current proof
  string provenHash = 3;
}
