// source: anchor/anchor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.anchor.Anchor', null, global);
goog.exportSymbol('proto.anchor.Anchor.Status', null, global);
goog.exportSymbol('proto.anchor.Anchor.Type', null, global);
goog.exportSymbol('proto.anchor.AnchorRequest', null, global);
goog.exportSymbol('proto.anchor.Batch', null, global);
goog.exportSymbol('proto.anchor.Batch.Status', null, global);
goog.exportSymbol('proto.anchor.BatchRequest', null, global);
goog.exportSymbol('proto.anchor.Proof', null, global);
goog.exportSymbol('proto.anchor.Proof.Format', null, global);
goog.exportSymbol('proto.anchor.ProofRequest', null, global);
goog.exportSymbol('proto.anchor.SubmitProofRequest', null, global);
goog.exportSymbol('proto.anchor.SubscribeBatchesRequest', null, global);
goog.exportSymbol('proto.anchor.VerifyProofReply', null, global);
goog.exportSymbol('proto.anchor.VerifyProofRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.Anchor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.anchor.Anchor.repeatedFields_, null);
};
goog.inherits(proto.anchor.Anchor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.Anchor.displayName = 'proto.anchor.Anchor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.Batch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anchor.Batch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.Batch.displayName = 'proto.anchor.Batch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.Proof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anchor.Proof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.Proof.displayName = 'proto.anchor.Proof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.AnchorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anchor.AnchorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.AnchorRequest.displayName = 'proto.anchor.AnchorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.ProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anchor.ProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.ProofRequest.displayName = 'proto.anchor.ProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.SubmitProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anchor.SubmitProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.SubmitProofRequest.displayName = 'proto.anchor.SubmitProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.VerifyProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anchor.VerifyProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.VerifyProofRequest.displayName = 'proto.anchor.VerifyProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.VerifyProofReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anchor.VerifyProofReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.VerifyProofReply.displayName = 'proto.anchor.VerifyProofReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.BatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anchor.BatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.BatchRequest.displayName = 'proto.anchor.BatchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.anchor.SubscribeBatchesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.anchor.SubscribeBatchesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.anchor.SubscribeBatchesRequest.displayName = 'proto.anchor.SubscribeBatchesRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.anchor.Anchor.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.Anchor.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.Anchor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.Anchor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.Anchor.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    supportedFormatsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.Anchor}
 */
proto.anchor.Anchor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.Anchor;
  return proto.anchor.Anchor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.Anchor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.Anchor}
 */
proto.anchor.Anchor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.anchor.Anchor.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = /** @type {!Array<!proto.anchor.Proof.Format>} */ (reader.readPackedEnum());
      msg.setSupportedFormatsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.Anchor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.Anchor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.Anchor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.Anchor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSupportedFormatsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anchor.Anchor.Type = {
  ETH: 0,
  ETH_MAINNET: 3,
  ETH_ELASTOS: 4,
  BTC: 1,
  BTC_MAINNET: 5,
  CHP: 2,
  HEDERA: 6,
  HEDERA_MAINNET: 7,
  HYPERLEDGER: 8
};

/**
 * @enum {number}
 */
proto.anchor.Anchor.Status = {
  ERROR: 0,
  STOPPED: 1,
  RUNNING: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.anchor.Anchor.prototype.getType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.anchor.Anchor} returns this
 */
proto.anchor.Anchor.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.anchor.Anchor.Status}
 */
proto.anchor.Anchor.prototype.getStatus = function() {
  return /** @type {!proto.anchor.Anchor.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.anchor.Anchor.Status} value
 * @return {!proto.anchor.Anchor} returns this
 */
proto.anchor.Anchor.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.anchor.Anchor.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.Anchor} returns this
 */
proto.anchor.Anchor.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Proof.Format supported_formats = 4;
 * @return {!Array<!proto.anchor.Proof.Format>}
 */
proto.anchor.Anchor.prototype.getSupportedFormatsList = function() {
  return /** @type {!Array<!proto.anchor.Proof.Format>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.anchor.Proof.Format>} value
 * @return {!proto.anchor.Anchor} returns this
 */
proto.anchor.Anchor.prototype.setSupportedFormatsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.anchor.Proof.Format} value
 * @param {number=} opt_index
 * @return {!proto.anchor.Anchor} returns this
 */
proto.anchor.Anchor.prototype.addSupportedFormats = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.anchor.Anchor} returns this
 */
proto.anchor.Anchor.prototype.clearSupportedFormatsList = function() {
  return this.setSupportedFormatsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.Batch.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.Batch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.Batch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.Batch.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    anchorType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proofFormat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    error: jspb.Message.getFieldWithDefault(msg, 5, ""),
    size: jspb.Message.getFieldWithDefault(msg, 6, 0),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    flushedAt: (f = msg.getFlushedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    startedAt: (f = msg.getStartedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    submittedAt: (f = msg.getSubmittedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    finalizedAt: (f = msg.getFinalizedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    hash: jspb.Message.getFieldWithDefault(msg, 12, ""),
    data: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.Batch}
 */
proto.anchor.Batch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.Batch;
  return proto.anchor.Batch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.Batch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.Batch}
 */
proto.anchor.Batch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setAnchorType(value);
      break;
    case 3:
      var value = /** @type {!proto.anchor.Proof.Format} */ (reader.readEnum());
      msg.setProofFormat(value);
      break;
    case 4:
      var value = /** @type {!proto.anchor.Batch.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFlushedAt(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartedAt(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setSubmittedAt(value);
      break;
    case 11:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFinalizedAt(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.Batch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.Batch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.Batch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.Batch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnchorType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProofFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFlushedAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getStartedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSubmittedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFinalizedAt();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.anchor.Batch.Status = {
  ERROR: 0,
  BATCHING: 1,
  QUEUING: 2,
  PROCESSING: 3,
  PENDING: 4,
  CONFIRMED: 5
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.anchor.Batch.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Anchor.Type anchor_type = 2;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.anchor.Batch.prototype.getAnchorType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.setAnchorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Proof.Format proof_format = 3;
 * @return {!proto.anchor.Proof.Format}
 */
proto.anchor.Batch.prototype.getProofFormat = function() {
  return /** @type {!proto.anchor.Proof.Format} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anchor.Proof.Format} value
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.setProofFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Status status = 4;
 * @return {!proto.anchor.Batch.Status}
 */
proto.anchor.Batch.prototype.getStatus = function() {
  return /** @type {!proto.anchor.Batch.Status} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.anchor.Batch.Status} value
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string error = 5;
 * @return {string}
 */
proto.anchor.Batch.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 size = 6;
 * @return {number}
 */
proto.anchor.Batch.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.anchor.Batch.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.anchor.Batch} returns this
*/
proto.anchor.Batch.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anchor.Batch.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp flushed_at = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.anchor.Batch.prototype.getFlushedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.anchor.Batch} returns this
*/
proto.anchor.Batch.prototype.setFlushedAt = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.clearFlushedAt = function() {
  return this.setFlushedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anchor.Batch.prototype.hasFlushedAt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp started_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.anchor.Batch.prototype.getStartedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.anchor.Batch} returns this
*/
proto.anchor.Batch.prototype.setStartedAt = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.clearStartedAt = function() {
  return this.setStartedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anchor.Batch.prototype.hasStartedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional google.protobuf.Timestamp submitted_at = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.anchor.Batch.prototype.getSubmittedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.anchor.Batch} returns this
*/
proto.anchor.Batch.prototype.setSubmittedAt = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.clearSubmittedAt = function() {
  return this.setSubmittedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anchor.Batch.prototype.hasSubmittedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional google.protobuf.Timestamp finalized_at = 11;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.anchor.Batch.prototype.getFinalizedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 11));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.anchor.Batch} returns this
*/
proto.anchor.Batch.prototype.setFinalizedAt = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.clearFinalizedAt = function() {
  return this.setFinalizedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anchor.Batch.prototype.hasFinalizedAt = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string hash = 12;
 * @return {string}
 */
proto.anchor.Batch.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string data = 13;
 * @return {string}
 */
proto.anchor.Batch.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.Batch} returns this
 */
proto.anchor.Batch.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.Proof.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.Proof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.Proof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.Proof.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    batchId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    anchorType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    batchStatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    format: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: jspb.Message.getFieldWithDefault(msg, 6, ""),
    batch: (f = msg.getBatch()) && proto.anchor.Batch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.Proof}
 */
proto.anchor.Proof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.Proof;
  return proto.anchor.Proof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.Proof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.Proof}
 */
proto.anchor.Proof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchId(value);
      break;
    case 3:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setAnchorType(value);
      break;
    case 4:
      var value = /** @type {!proto.anchor.Batch.Status} */ (reader.readEnum());
      msg.setBatchStatus(value);
      break;
    case 5:
      var value = /** @type {!proto.anchor.Proof.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 7:
      var value = new proto.anchor.Batch;
      reader.readMessage(value,proto.anchor.Batch.deserializeBinaryFromReader);
      msg.setBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.Proof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.Proof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.Proof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.Proof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBatchId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnchorType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getBatchStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBatch();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.anchor.Batch.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.anchor.Proof.Format = {
  CHP_PATH: 0,
  ETH_TRIE: 1,
  CHP_PATH_SIGNED: 2,
  ETH_TRIE_SIGNED: 3
};

/**
 * optional string hash = 1;
 * @return {string}
 */
proto.anchor.Proof.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.Proof} returns this
 */
proto.anchor.Proof.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string batch_id = 2;
 * @return {string}
 */
proto.anchor.Proof.prototype.getBatchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.Proof} returns this
 */
proto.anchor.Proof.prototype.setBatchId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Anchor.Type anchor_type = 3;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.anchor.Proof.prototype.getAnchorType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.anchor.Proof} returns this
 */
proto.anchor.Proof.prototype.setAnchorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Batch.Status batch_status = 4;
 * @return {!proto.anchor.Batch.Status}
 */
proto.anchor.Proof.prototype.getBatchStatus = function() {
  return /** @type {!proto.anchor.Batch.Status} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.anchor.Batch.Status} value
 * @return {!proto.anchor.Proof} returns this
 */
proto.anchor.Proof.prototype.setBatchStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Format format = 5;
 * @return {!proto.anchor.Proof.Format}
 */
proto.anchor.Proof.prototype.getFormat = function() {
  return /** @type {!proto.anchor.Proof.Format} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.anchor.Proof.Format} value
 * @return {!proto.anchor.Proof} returns this
 */
proto.anchor.Proof.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string data = 6;
 * @return {string}
 */
proto.anchor.Proof.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.Proof} returns this
 */
proto.anchor.Proof.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Batch batch = 7;
 * @return {?proto.anchor.Batch}
 */
proto.anchor.Proof.prototype.getBatch = function() {
  return /** @type{?proto.anchor.Batch} */ (
    jspb.Message.getWrapperField(this, proto.anchor.Batch, 7));
};


/**
 * @param {?proto.anchor.Batch|undefined} value
 * @return {!proto.anchor.Proof} returns this
*/
proto.anchor.Proof.prototype.setBatch = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anchor.Proof} returns this
 */
proto.anchor.Proof.prototype.clearBatch = function() {
  return this.setBatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anchor.Proof.prototype.hasBatch = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.AnchorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.AnchorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.AnchorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.AnchorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.AnchorRequest}
 */
proto.anchor.AnchorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.AnchorRequest;
  return proto.anchor.AnchorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.AnchorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.AnchorRequest}
 */
proto.anchor.AnchorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.AnchorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.AnchorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.AnchorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.AnchorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Anchor.Type type = 1;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.anchor.AnchorRequest.prototype.getType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.anchor.AnchorRequest} returns this
 */
proto.anchor.AnchorRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.ProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.ProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.ProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.ProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    batchId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    anchorType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    withBatch: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.ProofRequest}
 */
proto.anchor.ProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.ProofRequest;
  return proto.anchor.ProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.ProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.ProofRequest}
 */
proto.anchor.ProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchId(value);
      break;
    case 3:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setAnchorType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.ProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.ProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.ProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.ProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBatchId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnchorType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getWithBatch();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.anchor.ProofRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.ProofRequest} returns this
 */
proto.anchor.ProofRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string batch_id = 2;
 * @return {string}
 */
proto.anchor.ProofRequest.prototype.getBatchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.ProofRequest} returns this
 */
proto.anchor.ProofRequest.prototype.setBatchId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Anchor.Type anchor_type = 3;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.anchor.ProofRequest.prototype.getAnchorType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.anchor.ProofRequest} returns this
 */
proto.anchor.ProofRequest.prototype.setAnchorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool with_batch = 4;
 * @return {boolean}
 */
proto.anchor.ProofRequest.prototype.getWithBatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anchor.ProofRequest} returns this
 */
proto.anchor.ProofRequest.prototype.setWithBatch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.SubmitProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.SubmitProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.SubmitProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.SubmitProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    anchorType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    format: jspb.Message.getFieldWithDefault(msg, 3, 0),
    skipBatching: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    withBatch: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.SubmitProofRequest}
 */
proto.anchor.SubmitProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.SubmitProofRequest;
  return proto.anchor.SubmitProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.SubmitProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.SubmitProofRequest}
 */
proto.anchor.SubmitProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setAnchorType(value);
      break;
    case 3:
      var value = /** @type {!proto.anchor.Proof.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkipBatching(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.SubmitProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.SubmitProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.SubmitProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.SubmitProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnchorType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSkipBatching();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getWithBatch();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.anchor.SubmitProofRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.SubmitProofRequest} returns this
 */
proto.anchor.SubmitProofRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Anchor.Type anchor_type = 2;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.anchor.SubmitProofRequest.prototype.getAnchorType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.anchor.SubmitProofRequest} returns this
 */
proto.anchor.SubmitProofRequest.prototype.setAnchorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Proof.Format format = 3;
 * @return {!proto.anchor.Proof.Format}
 */
proto.anchor.SubmitProofRequest.prototype.getFormat = function() {
  return /** @type {!proto.anchor.Proof.Format} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anchor.Proof.Format} value
 * @return {!proto.anchor.SubmitProofRequest} returns this
 */
proto.anchor.SubmitProofRequest.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool skip_batching = 4;
 * @return {boolean}
 */
proto.anchor.SubmitProofRequest.prototype.getSkipBatching = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anchor.SubmitProofRequest} returns this
 */
proto.anchor.SubmitProofRequest.prototype.setSkipBatching = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool with_batch = 5;
 * @return {boolean}
 */
proto.anchor.SubmitProofRequest.prototype.getWithBatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anchor.SubmitProofRequest} returns this
 */
proto.anchor.SubmitProofRequest.prototype.setWithBatch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.VerifyProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.VerifyProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.VerifyProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.VerifyProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    format: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.VerifyProofRequest}
 */
proto.anchor.VerifyProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.VerifyProofRequest;
  return proto.anchor.VerifyProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.VerifyProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.VerifyProofRequest}
 */
proto.anchor.VerifyProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setAnchorType(value);
      break;
    case 2:
      var value = /** @type {!proto.anchor.Proof.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.VerifyProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.VerifyProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.VerifyProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.VerifyProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchorType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Anchor.Type anchor_type = 1;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.anchor.VerifyProofRequest.prototype.getAnchorType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.anchor.VerifyProofRequest} returns this
 */
proto.anchor.VerifyProofRequest.prototype.setAnchorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Proof.Format format = 2;
 * @return {!proto.anchor.Proof.Format}
 */
proto.anchor.VerifyProofRequest.prototype.getFormat = function() {
  return /** @type {!proto.anchor.Proof.Format} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.anchor.Proof.Format} value
 * @return {!proto.anchor.VerifyProofRequest} returns this
 */
proto.anchor.VerifyProofRequest.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string data = 3;
 * @return {string}
 */
proto.anchor.VerifyProofRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.VerifyProofRequest} returns this
 */
proto.anchor.VerifyProofRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.VerifyProofReply.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.VerifyProofReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.VerifyProofReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.VerifyProofReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    verified: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    provenhash: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.VerifyProofReply}
 */
proto.anchor.VerifyProofReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.VerifyProofReply;
  return proto.anchor.VerifyProofReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.VerifyProofReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.VerifyProofReply}
 */
proto.anchor.VerifyProofReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvenhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.VerifyProofReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.VerifyProofReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.VerifyProofReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.VerifyProofReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProvenhash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool verified = 1;
 * @return {boolean}
 */
proto.anchor.VerifyProofReply.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.anchor.VerifyProofReply} returns this
 */
proto.anchor.VerifyProofReply.prototype.setVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.anchor.VerifyProofReply.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.VerifyProofReply} returns this
 */
proto.anchor.VerifyProofReply.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string provenHash = 3;
 * @return {string}
 */
proto.anchor.VerifyProofReply.prototype.getProvenhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.VerifyProofReply} returns this
 */
proto.anchor.VerifyProofReply.prototype.setProvenhash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.BatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.BatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.BatchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.BatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    anchorType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.BatchRequest}
 */
proto.anchor.BatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.BatchRequest;
  return proto.anchor.BatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.BatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.BatchRequest}
 */
proto.anchor.BatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchId(value);
      break;
    case 2:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setAnchorType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.BatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.BatchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.BatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.BatchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnchorType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string batch_id = 1;
 * @return {string}
 */
proto.anchor.BatchRequest.prototype.getBatchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.anchor.BatchRequest} returns this
 */
proto.anchor.BatchRequest.prototype.setBatchId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Anchor.Type anchor_type = 2;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.anchor.BatchRequest.prototype.getAnchorType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.anchor.BatchRequest} returns this
 */
proto.anchor.BatchRequest.prototype.setAnchorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.anchor.SubscribeBatchesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.anchor.SubscribeBatchesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.anchor.SubscribeBatchesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.SubscribeBatchesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.anchor.BatchRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.anchor.SubscribeBatchesRequest}
 */
proto.anchor.SubscribeBatchesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.anchor.SubscribeBatchesRequest;
  return proto.anchor.SubscribeBatchesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.anchor.SubscribeBatchesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.anchor.SubscribeBatchesRequest}
 */
proto.anchor.SubscribeBatchesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.anchor.BatchRequest;
      reader.readMessage(value,proto.anchor.BatchRequest.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.anchor.SubscribeBatchesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.anchor.SubscribeBatchesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.anchor.SubscribeBatchesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.anchor.SubscribeBatchesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.anchor.BatchRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional BatchRequest filter = 1;
 * @return {?proto.anchor.BatchRequest}
 */
proto.anchor.SubscribeBatchesRequest.prototype.getFilter = function() {
  return /** @type{?proto.anchor.BatchRequest} */ (
    jspb.Message.getWrapperField(this, proto.anchor.BatchRequest, 1));
};


/**
 * @param {?proto.anchor.BatchRequest|undefined} value
 * @return {!proto.anchor.SubscribeBatchesRequest} returns this
*/
proto.anchor.SubscribeBatchesRequest.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.anchor.SubscribeBatchesRequest} returns this
 */
proto.anchor.SubscribeBatchesRequest.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.anchor.SubscribeBatchesRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.anchor);
