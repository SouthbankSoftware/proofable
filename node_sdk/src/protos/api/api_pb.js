// source: api/api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var anchor_anchor_pb = require('../anchor/anchor_pb.js');
goog.object.extend(proto, anchor_anchor_pb);
goog.exportSymbol('proto.api.CreateKeyValuesProofRequest', null, global);
goog.exportSymbol('proto.api.CreateKeyValuesProofRequest.TrieProofCase', null, global);
goog.exportSymbol('proto.api.CreateTrieProofRequest', null, global);
goog.exportSymbol('proto.api.DataChunk', null, global);
goog.exportSymbol('proto.api.DataChunk.MetadataCase', null, global);
goog.exportSymbol('proto.api.DeleteTrieProofRequest', null, global);
goog.exportSymbol('proto.api.Key', null, global);
goog.exportSymbol('proto.api.KeyValue', null, global);
goog.exportSymbol('proto.api.KeyValue.MetadataCase', null, global);
goog.exportSymbol('proto.api.KeyValuesFilter', null, global);
goog.exportSymbol('proto.api.RootFilter', null, global);
goog.exportSymbol('proto.api.SetTrieRootRequest', null, global);
goog.exportSymbol('proto.api.Trie', null, global);
goog.exportSymbol('proto.api.TrieKeyValueRequest', null, global);
goog.exportSymbol('proto.api.TrieKeyValuesRequest', null, global);
goog.exportSymbol('proto.api.TrieProof', null, global);
goog.exportSymbol('proto.api.TrieProofRequest', null, global);
goog.exportSymbol('proto.api.TrieProofRequest.QueryCase', null, global);
goog.exportSymbol('proto.api.TrieProofsRequest', null, global);
goog.exportSymbol('proto.api.TrieRequest', null, global);
goog.exportSymbol('proto.api.TrieRoot', null, global);
goog.exportSymbol('proto.api.TrieRootsRequest', null, global);
goog.exportSymbol('proto.api.VerifyKeyValuesProofRequest', null, global);
goog.exportSymbol('proto.api.VerifyProofReply', null, global);
goog.exportSymbol('proto.api.VerifyProofReplyChunk', null, global);
goog.exportSymbol('proto.api.VerifyProofReplyChunk.DataCase', null, global);
goog.exportSymbol('proto.api.VerifyTrieProofRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Trie = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Trie, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Trie.displayName = 'proto.api.Trie';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DataChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.DataChunk.oneofGroups_);
};
goog.inherits(proto.api.DataChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DataChunk.displayName = 'proto.api.DataChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.KeyValue.repeatedFields_, proto.api.KeyValue.oneofGroups_);
};
goog.inherits(proto.api.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.KeyValue.displayName = 'proto.api.KeyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.VerifyProofReplyChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.VerifyProofReplyChunk.oneofGroups_);
};
goog.inherits(proto.api.VerifyProofReplyChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.VerifyProofReplyChunk.displayName = 'proto.api.VerifyProofReplyChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Key.repeatedFields_, null);
};
goog.inherits(proto.api.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Key.displayName = 'proto.api.Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TrieRoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TrieRoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TrieRoot.displayName = 'proto.api.TrieRoot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TrieProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TrieProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TrieProof.displayName = 'proto.api.TrieProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RootFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RootFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RootFilter.displayName = 'proto.api.RootFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.KeyValuesFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.KeyValuesFilter.repeatedFields_, null);
};
goog.inherits(proto.api.KeyValuesFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.KeyValuesFilter.displayName = 'proto.api.KeyValuesFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TrieRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TrieRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TrieRequest.displayName = 'proto.api.TrieRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TrieKeyValuesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TrieKeyValuesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TrieKeyValuesRequest.displayName = 'proto.api.TrieKeyValuesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TrieKeyValueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TrieKeyValueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TrieKeyValueRequest.displayName = 'proto.api.TrieKeyValueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TrieRootsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TrieRootsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TrieRootsRequest.displayName = 'proto.api.TrieRootsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SetTrieRootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SetTrieRootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.SetTrieRootRequest.displayName = 'proto.api.SetTrieRootRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TrieProofsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TrieProofsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TrieProofsRequest.displayName = 'proto.api.TrieProofsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TrieProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.TrieProofRequest.oneofGroups_);
};
goog.inherits(proto.api.TrieProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TrieProofRequest.displayName = 'proto.api.TrieProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.CreateTrieProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.CreateTrieProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.CreateTrieProofRequest.displayName = 'proto.api.CreateTrieProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DeleteTrieProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DeleteTrieProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DeleteTrieProofRequest.displayName = 'proto.api.DeleteTrieProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.VerifyTrieProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.VerifyTrieProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.VerifyTrieProofRequest.displayName = 'proto.api.VerifyTrieProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.CreateKeyValuesProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.CreateKeyValuesProofRequest.oneofGroups_);
};
goog.inherits(proto.api.CreateKeyValuesProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.CreateKeyValuesProofRequest.displayName = 'proto.api.CreateKeyValuesProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.VerifyKeyValuesProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.VerifyKeyValuesProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.VerifyKeyValuesProofRequest.displayName = 'proto.api.VerifyKeyValuesProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.VerifyProofReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.VerifyProofReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.VerifyProofReply.displayName = 'proto.api.VerifyProofReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Trie.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Trie.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Trie} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Trie.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    root: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Trie}
 */
proto.api.Trie.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Trie;
  return proto.api.Trie.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Trie} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Trie}
 */
proto.api.Trie.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Trie.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Trie.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Trie} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Trie.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoot();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.Trie.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Trie} returns this
 */
proto.api.Trie.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string root = 2;
 * @return {string}
 */
proto.api.Trie.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Trie} returns this
 */
proto.api.Trie.prototype.setRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.DataChunk.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.api.DataChunk.MetadataCase = {
  METADATA_NOT_SET: 0,
  TRIE_REQUEST: 2,
  VERIFY_KEY_VALUES_PROOF_REQUEST: 3
};

/**
 * @return {proto.api.DataChunk.MetadataCase}
 */
proto.api.DataChunk.prototype.getMetadataCase = function() {
  return /** @type {proto.api.DataChunk.MetadataCase} */(jspb.Message.computeOneofCase(this, proto.api.DataChunk.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DataChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DataChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DataChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DataChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    trieRequest: (f = msg.getTrieRequest()) && proto.api.TrieRequest.toObject(includeInstance, f),
    verifyKeyValuesProofRequest: (f = msg.getVerifyKeyValuesProofRequest()) && proto.api.VerifyKeyValuesProofRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DataChunk}
 */
proto.api.DataChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DataChunk;
  return proto.api.DataChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DataChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DataChunk}
 */
proto.api.DataChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = new proto.api.TrieRequest;
      reader.readMessage(value,proto.api.TrieRequest.deserializeBinaryFromReader);
      msg.setTrieRequest(value);
      break;
    case 3:
      var value = new proto.api.VerifyKeyValuesProofRequest;
      reader.readMessage(value,proto.api.VerifyKeyValuesProofRequest.deserializeBinaryFromReader);
      msg.setVerifyKeyValuesProofRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DataChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DataChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DataChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DataChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTrieRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TrieRequest.serializeBinaryToWriter
    );
  }
  f = message.getVerifyKeyValuesProofRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.VerifyKeyValuesProofRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.DataChunk.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.api.DataChunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.api.DataChunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.DataChunk} returns this
 */
proto.api.DataChunk.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional TrieRequest trie_request = 2;
 * @return {?proto.api.TrieRequest}
 */
proto.api.DataChunk.prototype.getTrieRequest = function() {
  return /** @type{?proto.api.TrieRequest} */ (
    jspb.Message.getWrapperField(this, proto.api.TrieRequest, 2));
};


/**
 * @param {?proto.api.TrieRequest|undefined} value
 * @return {!proto.api.DataChunk} returns this
*/
proto.api.DataChunk.prototype.setTrieRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.DataChunk.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.DataChunk} returns this
 */
proto.api.DataChunk.prototype.clearTrieRequest = function() {
  return this.setTrieRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.DataChunk.prototype.hasTrieRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VerifyKeyValuesProofRequest verify_key_values_proof_request = 3;
 * @return {?proto.api.VerifyKeyValuesProofRequest}
 */
proto.api.DataChunk.prototype.getVerifyKeyValuesProofRequest = function() {
  return /** @type{?proto.api.VerifyKeyValuesProofRequest} */ (
    jspb.Message.getWrapperField(this, proto.api.VerifyKeyValuesProofRequest, 3));
};


/**
 * @param {?proto.api.VerifyKeyValuesProofRequest|undefined} value
 * @return {!proto.api.DataChunk} returns this
*/
proto.api.DataChunk.prototype.setVerifyKeyValuesProofRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.DataChunk.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.DataChunk} returns this
 */
proto.api.DataChunk.prototype.clearVerifyKeyValuesProofRequest = function() {
  return this.setVerifyKeyValuesProofRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.DataChunk.prototype.hasVerifyKeyValuesProofRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.KeyValue.repeatedFields_ = [2];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.KeyValue.oneofGroups_ = [[4]];

/**
 * @enum {number}
 */
proto.api.KeyValue.MetadataCase = {
  METADATA_NOT_SET: 0,
  TRIE_KEY_VALUES_REQUEST: 4
};

/**
 * @return {proto.api.KeyValue.MetadataCase}
 */
proto.api.KeyValue.prototype.getMetadataCase = function() {
  return /** @type {proto.api.KeyValue.MetadataCase} */(jspb.Message.computeOneofCase(this, proto.api.KeyValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.api.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    keySepList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    value: msg.getValue_asB64(),
    trieKeyValuesRequest: (f = msg.getTrieKeyValuesRequest()) && proto.api.TrieKeyValuesRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.KeyValue}
 */
proto.api.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.KeyValue;
  return proto.api.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.KeyValue}
 */
proto.api.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setKeySepList(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.api.TrieKeyValuesRequest;
      reader.readMessage(value,proto.api.TrieKeyValuesRequest.deserializeBinaryFromReader);
      msg.setTrieKeyValuesRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKeySepList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTrieKeyValuesRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TrieKeyValuesRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.KeyValue.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.api.KeyValue.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.api.KeyValue.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.KeyValue} returns this
 */
proto.api.KeyValue.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated uint32 key_sep = 2;
 * @return {!Array<number>}
 */
proto.api.KeyValue.prototype.getKeySepList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.api.KeyValue} returns this
 */
proto.api.KeyValue.prototype.setKeySepList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.api.KeyValue} returns this
 */
proto.api.KeyValue.prototype.addKeySep = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.KeyValue} returns this
 */
proto.api.KeyValue.prototype.clearKeySepList = function() {
  return this.setKeySepList([]);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.api.KeyValue.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.api.KeyValue.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.api.KeyValue.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.KeyValue} returns this
 */
proto.api.KeyValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional TrieKeyValuesRequest trie_key_values_request = 4;
 * @return {?proto.api.TrieKeyValuesRequest}
 */
proto.api.KeyValue.prototype.getTrieKeyValuesRequest = function() {
  return /** @type{?proto.api.TrieKeyValuesRequest} */ (
    jspb.Message.getWrapperField(this, proto.api.TrieKeyValuesRequest, 4));
};


/**
 * @param {?proto.api.TrieKeyValuesRequest|undefined} value
 * @return {!proto.api.KeyValue} returns this
*/
proto.api.KeyValue.prototype.setTrieKeyValuesRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.api.KeyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.KeyValue} returns this
 */
proto.api.KeyValue.prototype.clearTrieKeyValuesRequest = function() {
  return this.setTrieKeyValuesRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.KeyValue.prototype.hasTrieKeyValuesRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.VerifyProofReplyChunk.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.api.VerifyProofReplyChunk.DataCase = {
  DATA_NOT_SET: 0,
  KEY_VALUE: 1,
  DOT_GRAPH_CHUNK: 2,
  REPLY: 3
};

/**
 * @return {proto.api.VerifyProofReplyChunk.DataCase}
 */
proto.api.VerifyProofReplyChunk.prototype.getDataCase = function() {
  return /** @type {proto.api.VerifyProofReplyChunk.DataCase} */(jspb.Message.computeOneofCase(this, proto.api.VerifyProofReplyChunk.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.VerifyProofReplyChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.api.VerifyProofReplyChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.VerifyProofReplyChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.VerifyProofReplyChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyValue: (f = msg.getKeyValue()) && proto.api.KeyValue.toObject(includeInstance, f),
    dotGraphChunk: (f = msg.getDotGraphChunk()) && proto.api.DataChunk.toObject(includeInstance, f),
    reply: (f = msg.getReply()) && proto.api.VerifyProofReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.VerifyProofReplyChunk}
 */
proto.api.VerifyProofReplyChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.VerifyProofReplyChunk;
  return proto.api.VerifyProofReplyChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.VerifyProofReplyChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.VerifyProofReplyChunk}
 */
proto.api.VerifyProofReplyChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.KeyValue;
      reader.readMessage(value,proto.api.KeyValue.deserializeBinaryFromReader);
      msg.setKeyValue(value);
      break;
    case 2:
      var value = new proto.api.DataChunk;
      reader.readMessage(value,proto.api.DataChunk.deserializeBinaryFromReader);
      msg.setDotGraphChunk(value);
      break;
    case 3:
      var value = new proto.api.VerifyProofReply;
      reader.readMessage(value,proto.api.VerifyProofReply.deserializeBinaryFromReader);
      msg.setReply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.VerifyProofReplyChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.VerifyProofReplyChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.VerifyProofReplyChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.VerifyProofReplyChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getDotGraphChunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.DataChunk.serializeBinaryToWriter
    );
  }
  f = message.getReply();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.VerifyProofReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyValue key_value = 1;
 * @return {?proto.api.KeyValue}
 */
proto.api.VerifyProofReplyChunk.prototype.getKeyValue = function() {
  return /** @type{?proto.api.KeyValue} */ (
    jspb.Message.getWrapperField(this, proto.api.KeyValue, 1));
};


/**
 * @param {?proto.api.KeyValue|undefined} value
 * @return {!proto.api.VerifyProofReplyChunk} returns this
*/
proto.api.VerifyProofReplyChunk.prototype.setKeyValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.VerifyProofReplyChunk.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.VerifyProofReplyChunk} returns this
 */
proto.api.VerifyProofReplyChunk.prototype.clearKeyValue = function() {
  return this.setKeyValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.VerifyProofReplyChunk.prototype.hasKeyValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DataChunk dot_graph_chunk = 2;
 * @return {?proto.api.DataChunk}
 */
proto.api.VerifyProofReplyChunk.prototype.getDotGraphChunk = function() {
  return /** @type{?proto.api.DataChunk} */ (
    jspb.Message.getWrapperField(this, proto.api.DataChunk, 2));
};


/**
 * @param {?proto.api.DataChunk|undefined} value
 * @return {!proto.api.VerifyProofReplyChunk} returns this
*/
proto.api.VerifyProofReplyChunk.prototype.setDotGraphChunk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.VerifyProofReplyChunk.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.VerifyProofReplyChunk} returns this
 */
proto.api.VerifyProofReplyChunk.prototype.clearDotGraphChunk = function() {
  return this.setDotGraphChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.VerifyProofReplyChunk.prototype.hasDotGraphChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VerifyProofReply reply = 3;
 * @return {?proto.api.VerifyProofReply}
 */
proto.api.VerifyProofReplyChunk.prototype.getReply = function() {
  return /** @type{?proto.api.VerifyProofReply} */ (
    jspb.Message.getWrapperField(this, proto.api.VerifyProofReply, 3));
};


/**
 * @param {?proto.api.VerifyProofReply|undefined} value
 * @return {!proto.api.VerifyProofReplyChunk} returns this
*/
proto.api.VerifyProofReplyChunk.prototype.setReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.VerifyProofReplyChunk.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.VerifyProofReplyChunk} returns this
 */
proto.api.VerifyProofReplyChunk.prototype.clearReply = function() {
  return this.setReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.VerifyProofReplyChunk.prototype.hasReply = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Key.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    keySepList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Key}
 */
proto.api.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Key;
  return proto.api.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Key}
 */
proto.api.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setKeySepList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKeySepList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Key.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.api.Key.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.api.Key.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Key} returns this
 */
proto.api.Key.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated uint32 key_sep = 2;
 * @return {!Array<number>}
 */
proto.api.Key.prototype.getKeySepList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.api.Key} returns this
 */
proto.api.Key.prototype.setKeySepList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.api.Key} returns this
 */
proto.api.Key.prototype.addKeySep = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Key} returns this
 */
proto.api.Key.prototype.clearKeySepList = function() {
  return this.setKeySepList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TrieRoot.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TrieRoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TrieRoot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieRoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    root: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TrieRoot}
 */
proto.api.TrieRoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TrieRoot;
  return proto.api.TrieRoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TrieRoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TrieRoot}
 */
proto.api.TrieRoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoot(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TrieRoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TrieRoot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TrieRoot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieRoot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoot();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string root = 1;
 * @return {string}
 */
proto.api.TrieRoot.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieRoot} returns this
 */
proto.api.TrieRoot.prototype.setRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.TrieRoot.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.TrieRoot} returns this
*/
proto.api.TrieRoot.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TrieRoot} returns this
 */
proto.api.TrieRoot.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TrieRoot.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TrieProof.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TrieProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TrieProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    trieId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    root: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    error: jspb.Message.getFieldWithDefault(msg, 6, ""),
    anchorType: jspb.Message.getFieldWithDefault(msg, 7, 0),
    txnId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    txnUri: jspb.Message.getFieldWithDefault(msg, 12, ""),
    blockTime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    blockNumber: jspb.Message.getFieldWithDefault(msg, 10, 0),
    proofRoot: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TrieProof}
 */
proto.api.TrieProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TrieProof;
  return proto.api.TrieProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TrieProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TrieProof}
 */
proto.api.TrieProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoot(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = /** @type {!proto.anchor.Batch.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 7:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setAnchorType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxnId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxnUri(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockTime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumber(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setProofRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TrieProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TrieProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TrieProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoot();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAnchorType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTxnId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTxnUri();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getBlockTime();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getProofRoot();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.TrieProof.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trie_id = 2;
 * @return {string}
 */
proto.api.TrieProof.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string root = 3;
 * @return {string}
 */
proto.api.TrieProof.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.TrieProof.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.TrieProof} returns this
*/
proto.api.TrieProof.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TrieProof.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional anchor.Batch.Status status = 5;
 * @return {!proto.anchor.Batch.Status}
 */
proto.api.TrieProof.prototype.getStatus = function() {
  return /** @type {!proto.anchor.Batch.Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.anchor.Batch.Status} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string error = 6;
 * @return {string}
 */
proto.api.TrieProof.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional anchor.Anchor.Type anchor_type = 7;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.api.TrieProof.prototype.getAnchorType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setAnchorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string txn_id = 8;
 * @return {string}
 */
proto.api.TrieProof.prototype.getTxnId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setTxnId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string txn_uri = 12;
 * @return {string}
 */
proto.api.TrieProof.prototype.getTxnUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setTxnUri = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint64 block_time = 9;
 * @return {number}
 */
proto.api.TrieProof.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 block_number = 10;
 * @return {number}
 */
proto.api.TrieProof.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string proof_root = 11;
 * @return {string}
 */
proto.api.TrieProof.prototype.getProofRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProof} returns this
 */
proto.api.TrieProof.prototype.setProofRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RootFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RootFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RootFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RootFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    root: jspb.Message.getFieldWithDefault(msg, 1, ""),
    notBefore: (f = msg.getNotBefore()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RootFilter}
 */
proto.api.RootFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RootFilter;
  return proto.api.RootFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RootFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RootFilter}
 */
proto.api.RootFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoot(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setNotBefore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RootFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RootFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RootFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RootFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoot();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNotBefore();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string root = 1;
 * @return {string}
 */
proto.api.RootFilter.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RootFilter} returns this
 */
proto.api.RootFilter.prototype.setRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp not_before = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.RootFilter.prototype.getNotBefore = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.RootFilter} returns this
*/
proto.api.RootFilter.prototype.setNotBefore = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RootFilter} returns this
 */
proto.api.RootFilter.prototype.clearNotBefore = function() {
  return this.setNotBefore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RootFilter.prototype.hasNotBefore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.KeyValuesFilter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.KeyValuesFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.KeyValuesFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.KeyValuesFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.KeyValuesFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.api.Key.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.KeyValuesFilter}
 */
proto.api.KeyValuesFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.KeyValuesFilter;
  return proto.api.KeyValuesFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.KeyValuesFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.KeyValuesFilter}
 */
proto.api.KeyValuesFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Key;
      reader.readMessage(value,proto.api.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.KeyValuesFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.KeyValuesFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.KeyValuesFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.KeyValuesFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Key.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Key keys = 1;
 * @return {!Array<!proto.api.Key>}
 */
proto.api.KeyValuesFilter.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.api.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Key, 1));
};


/**
 * @param {!Array<!proto.api.Key>} value
 * @return {!proto.api.KeyValuesFilter} returns this
*/
proto.api.KeyValuesFilter.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Key}
 */
proto.api.KeyValuesFilter.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.KeyValuesFilter} returns this
 */
proto.api.KeyValuesFilter.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TrieRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TrieRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TrieRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TrieRequest}
 */
proto.api.TrieRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TrieRequest;
  return proto.api.TrieRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TrieRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TrieRequest}
 */
proto.api.TrieRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TrieRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TrieRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TrieRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.TrieRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieRequest} returns this
 */
proto.api.TrieRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TrieKeyValuesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TrieKeyValuesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TrieKeyValuesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieKeyValuesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    root: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TrieKeyValuesRequest}
 */
proto.api.TrieKeyValuesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TrieKeyValuesRequest;
  return proto.api.TrieKeyValuesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TrieKeyValuesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TrieKeyValuesRequest}
 */
proto.api.TrieKeyValuesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TrieKeyValuesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TrieKeyValuesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TrieKeyValuesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieKeyValuesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoot();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.TrieKeyValuesRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieKeyValuesRequest} returns this
 */
proto.api.TrieKeyValuesRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string root = 2;
 * @return {string}
 */
proto.api.TrieKeyValuesRequest.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieKeyValuesRequest} returns this
 */
proto.api.TrieKeyValuesRequest.prototype.setRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TrieKeyValueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TrieKeyValueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TrieKeyValueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieKeyValueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    root: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: (f = msg.getKey()) && proto.api.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TrieKeyValueRequest}
 */
proto.api.TrieKeyValueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TrieKeyValueRequest;
  return proto.api.TrieKeyValueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TrieKeyValueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TrieKeyValueRequest}
 */
proto.api.TrieKeyValueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoot(value);
      break;
    case 3:
      var value = new proto.api.Key;
      reader.readMessage(value,proto.api.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TrieKeyValueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TrieKeyValueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TrieKeyValueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieKeyValueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoot();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.TrieKeyValueRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieKeyValueRequest} returns this
 */
proto.api.TrieKeyValueRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string root = 2;
 * @return {string}
 */
proto.api.TrieKeyValueRequest.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieKeyValueRequest} returns this
 */
proto.api.TrieKeyValueRequest.prototype.setRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Key key = 3;
 * @return {?proto.api.Key}
 */
proto.api.TrieKeyValueRequest.prototype.getKey = function() {
  return /** @type{?proto.api.Key} */ (
    jspb.Message.getWrapperField(this, proto.api.Key, 3));
};


/**
 * @param {?proto.api.Key|undefined} value
 * @return {!proto.api.TrieKeyValueRequest} returns this
*/
proto.api.TrieKeyValueRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TrieKeyValueRequest} returns this
 */
proto.api.TrieKeyValueRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TrieKeyValueRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TrieRootsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TrieRootsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TrieRootsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieRootsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootFilter: (f = msg.getRootFilter()) && proto.api.RootFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TrieRootsRequest}
 */
proto.api.TrieRootsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TrieRootsRequest;
  return proto.api.TrieRootsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TrieRootsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TrieRootsRequest}
 */
proto.api.TrieRootsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = new proto.api.RootFilter;
      reader.readMessage(value,proto.api.RootFilter.deserializeBinaryFromReader);
      msg.setRootFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TrieRootsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TrieRootsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TrieRootsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieRootsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.RootFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.TrieRootsRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieRootsRequest} returns this
 */
proto.api.TrieRootsRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RootFilter root_filter = 2;
 * @return {?proto.api.RootFilter}
 */
proto.api.TrieRootsRequest.prototype.getRootFilter = function() {
  return /** @type{?proto.api.RootFilter} */ (
    jspb.Message.getWrapperField(this, proto.api.RootFilter, 2));
};


/**
 * @param {?proto.api.RootFilter|undefined} value
 * @return {!proto.api.TrieRootsRequest} returns this
*/
proto.api.TrieRootsRequest.prototype.setRootFilter = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TrieRootsRequest} returns this
 */
proto.api.TrieRootsRequest.prototype.clearRootFilter = function() {
  return this.setRootFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TrieRootsRequest.prototype.hasRootFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SetTrieRootRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SetTrieRootRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SetTrieRootRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SetTrieRootRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    root: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SetTrieRootRequest}
 */
proto.api.SetTrieRootRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SetTrieRootRequest;
  return proto.api.SetTrieRootRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SetTrieRootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SetTrieRootRequest}
 */
proto.api.SetTrieRootRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SetTrieRootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.SetTrieRootRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.SetTrieRootRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SetTrieRootRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoot();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.SetTrieRootRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.SetTrieRootRequest} returns this
 */
proto.api.SetTrieRootRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string root = 2;
 * @return {string}
 */
proto.api.SetTrieRootRequest.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.SetTrieRootRequest} returns this
 */
proto.api.SetTrieRootRequest.prototype.setRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TrieProofsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TrieProofsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TrieProofsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieProofsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootFilter: (f = msg.getRootFilter()) && proto.api.RootFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TrieProofsRequest}
 */
proto.api.TrieProofsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TrieProofsRequest;
  return proto.api.TrieProofsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TrieProofsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TrieProofsRequest}
 */
proto.api.TrieProofsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = new proto.api.RootFilter;
      reader.readMessage(value,proto.api.RootFilter.deserializeBinaryFromReader);
      msg.setRootFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TrieProofsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TrieProofsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TrieProofsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieProofsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.RootFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.TrieProofsRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProofsRequest} returns this
 */
proto.api.TrieProofsRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RootFilter root_filter = 2;
 * @return {?proto.api.RootFilter}
 */
proto.api.TrieProofsRequest.prototype.getRootFilter = function() {
  return /** @type{?proto.api.RootFilter} */ (
    jspb.Message.getWrapperField(this, proto.api.RootFilter, 2));
};


/**
 * @param {?proto.api.RootFilter|undefined} value
 * @return {!proto.api.TrieProofsRequest} returns this
*/
proto.api.TrieProofsRequest.prototype.setRootFilter = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TrieProofsRequest} returns this
 */
proto.api.TrieProofsRequest.prototype.clearRootFilter = function() {
  return this.setRootFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TrieProofsRequest.prototype.hasRootFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.TrieProofRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.api.TrieProofRequest.QueryCase = {
  QUERY_NOT_SET: 0,
  PROOF_ID: 2,
  ROOT_FILTER: 3
};

/**
 * @return {proto.api.TrieProofRequest.QueryCase}
 */
proto.api.TrieProofRequest.prototype.getQueryCase = function() {
  return /** @type {proto.api.TrieProofRequest.QueryCase} */(jspb.Message.computeOneofCase(this, proto.api.TrieProofRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TrieProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TrieProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TrieProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proofId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rootFilter: (f = msg.getRootFilter()) && proto.api.RootFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TrieProofRequest}
 */
proto.api.TrieProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TrieProofRequest;
  return proto.api.TrieProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TrieProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TrieProofRequest}
 */
proto.api.TrieProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProofId(value);
      break;
    case 3:
      var value = new proto.api.RootFilter;
      reader.readMessage(value,proto.api.RootFilter.deserializeBinaryFromReader);
      msg.setRootFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TrieProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TrieProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TrieProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TrieProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRootFilter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.RootFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.TrieProofRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProofRequest} returns this
 */
proto.api.TrieProofRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string proof_id = 2;
 * @return {string}
 */
proto.api.TrieProofRequest.prototype.getProofId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TrieProofRequest} returns this
 */
proto.api.TrieProofRequest.prototype.setProofId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.api.TrieProofRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.TrieProofRequest} returns this
 */
proto.api.TrieProofRequest.prototype.clearProofId = function() {
  return jspb.Message.setOneofField(this, 2, proto.api.TrieProofRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TrieProofRequest.prototype.hasProofId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RootFilter root_filter = 3;
 * @return {?proto.api.RootFilter}
 */
proto.api.TrieProofRequest.prototype.getRootFilter = function() {
  return /** @type{?proto.api.RootFilter} */ (
    jspb.Message.getWrapperField(this, proto.api.RootFilter, 3));
};


/**
 * @param {?proto.api.RootFilter|undefined} value
 * @return {!proto.api.TrieProofRequest} returns this
*/
proto.api.TrieProofRequest.prototype.setRootFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.TrieProofRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TrieProofRequest} returns this
 */
proto.api.TrieProofRequest.prototype.clearRootFilter = function() {
  return this.setRootFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TrieProofRequest.prototype.hasRootFilter = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.CreateTrieProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.CreateTrieProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.CreateTrieProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CreateTrieProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    root: jspb.Message.getFieldWithDefault(msg, 2, ""),
    anchorType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.CreateTrieProofRequest}
 */
proto.api.CreateTrieProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.CreateTrieProofRequest;
  return proto.api.CreateTrieProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.CreateTrieProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.CreateTrieProofRequest}
 */
proto.api.CreateTrieProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoot(value);
      break;
    case 3:
      var value = /** @type {!proto.anchor.Anchor.Type} */ (reader.readEnum());
      msg.setAnchorType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.CreateTrieProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.CreateTrieProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.CreateTrieProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CreateTrieProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoot();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnchorType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.CreateTrieProofRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CreateTrieProofRequest} returns this
 */
proto.api.CreateTrieProofRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string root = 2;
 * @return {string}
 */
proto.api.CreateTrieProofRequest.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CreateTrieProofRequest} returns this
 */
proto.api.CreateTrieProofRequest.prototype.setRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional anchor.Anchor.Type anchor_type = 3;
 * @return {!proto.anchor.Anchor.Type}
 */
proto.api.CreateTrieProofRequest.prototype.getAnchorType = function() {
  return /** @type {!proto.anchor.Anchor.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.anchor.Anchor.Type} value
 * @return {!proto.api.CreateTrieProofRequest} returns this
 */
proto.api.CreateTrieProofRequest.prototype.setAnchorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DeleteTrieProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DeleteTrieProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DeleteTrieProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeleteTrieProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proofId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DeleteTrieProofRequest}
 */
proto.api.DeleteTrieProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DeleteTrieProofRequest;
  return proto.api.DeleteTrieProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DeleteTrieProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DeleteTrieProofRequest}
 */
proto.api.DeleteTrieProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProofId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DeleteTrieProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DeleteTrieProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DeleteTrieProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeleteTrieProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProofId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.DeleteTrieProofRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DeleteTrieProofRequest} returns this
 */
proto.api.DeleteTrieProofRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string proof_id = 2;
 * @return {string}
 */
proto.api.DeleteTrieProofRequest.prototype.getProofId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DeleteTrieProofRequest} returns this
 */
proto.api.DeleteTrieProofRequest.prototype.setProofId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.VerifyTrieProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.VerifyTrieProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.VerifyTrieProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.VerifyTrieProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proofId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    outputKeyValues: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    outputDotGraph: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.VerifyTrieProofRequest}
 */
proto.api.VerifyTrieProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.VerifyTrieProofRequest;
  return proto.api.VerifyTrieProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.VerifyTrieProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.VerifyTrieProofRequest}
 */
proto.api.VerifyTrieProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProofId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputKeyValues(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputDotGraph(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.VerifyTrieProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.VerifyTrieProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.VerifyTrieProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.VerifyTrieProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProofId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOutputKeyValues();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOutputDotGraph();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.VerifyTrieProofRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.VerifyTrieProofRequest} returns this
 */
proto.api.VerifyTrieProofRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string proof_id = 2;
 * @return {string}
 */
proto.api.VerifyTrieProofRequest.prototype.getProofId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.VerifyTrieProofRequest} returns this
 */
proto.api.VerifyTrieProofRequest.prototype.setProofId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool output_key_values = 3;
 * @return {boolean}
 */
proto.api.VerifyTrieProofRequest.prototype.getOutputKeyValues = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.VerifyTrieProofRequest} returns this
 */
proto.api.VerifyTrieProofRequest.prototype.setOutputKeyValues = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool output_dot_graph = 4;
 * @return {boolean}
 */
proto.api.VerifyTrieProofRequest.prototype.getOutputDotGraph = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.VerifyTrieProofRequest} returns this
 */
proto.api.VerifyTrieProofRequest.prototype.setOutputDotGraph = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.CreateKeyValuesProofRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.api.CreateKeyValuesProofRequest.TrieProofCase = {
  TRIE_PROOF_NOT_SET: 0,
  PROOF_ID: 2,
  REQUEST: 3
};

/**
 * @return {proto.api.CreateKeyValuesProofRequest.TrieProofCase}
 */
proto.api.CreateKeyValuesProofRequest.prototype.getTrieProofCase = function() {
  return /** @type {proto.api.CreateKeyValuesProofRequest.TrieProofCase} */(jspb.Message.computeOneofCase(this, proto.api.CreateKeyValuesProofRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.CreateKeyValuesProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.CreateKeyValuesProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.CreateKeyValuesProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CreateKeyValuesProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trieId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proofId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    request: (f = msg.getRequest()) && proto.api.CreateTrieProofRequest.toObject(includeInstance, f),
    filter: (f = msg.getFilter()) && proto.api.KeyValuesFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.CreateKeyValuesProofRequest}
 */
proto.api.CreateKeyValuesProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.CreateKeyValuesProofRequest;
  return proto.api.CreateKeyValuesProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.CreateKeyValuesProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.CreateKeyValuesProofRequest}
 */
proto.api.CreateKeyValuesProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrieId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProofId(value);
      break;
    case 3:
      var value = new proto.api.CreateTrieProofRequest;
      reader.readMessage(value,proto.api.CreateTrieProofRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 4:
      var value = new proto.api.KeyValuesFilter;
      reader.readMessage(value,proto.api.KeyValuesFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.CreateKeyValuesProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.CreateKeyValuesProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.CreateKeyValuesProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.CreateKeyValuesProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.CreateTrieProofRequest.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.KeyValuesFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string trie_id = 1;
 * @return {string}
 */
proto.api.CreateKeyValuesProofRequest.prototype.getTrieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CreateKeyValuesProofRequest} returns this
 */
proto.api.CreateKeyValuesProofRequest.prototype.setTrieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string proof_id = 2;
 * @return {string}
 */
proto.api.CreateKeyValuesProofRequest.prototype.getProofId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.CreateKeyValuesProofRequest} returns this
 */
proto.api.CreateKeyValuesProofRequest.prototype.setProofId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.api.CreateKeyValuesProofRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.CreateKeyValuesProofRequest} returns this
 */
proto.api.CreateKeyValuesProofRequest.prototype.clearProofId = function() {
  return jspb.Message.setOneofField(this, 2, proto.api.CreateKeyValuesProofRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.CreateKeyValuesProofRequest.prototype.hasProofId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CreateTrieProofRequest request = 3;
 * @return {?proto.api.CreateTrieProofRequest}
 */
proto.api.CreateKeyValuesProofRequest.prototype.getRequest = function() {
  return /** @type{?proto.api.CreateTrieProofRequest} */ (
    jspb.Message.getWrapperField(this, proto.api.CreateTrieProofRequest, 3));
};


/**
 * @param {?proto.api.CreateTrieProofRequest|undefined} value
 * @return {!proto.api.CreateKeyValuesProofRequest} returns this
*/
proto.api.CreateKeyValuesProofRequest.prototype.setRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.CreateKeyValuesProofRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.CreateKeyValuesProofRequest} returns this
 */
proto.api.CreateKeyValuesProofRequest.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.CreateKeyValuesProofRequest.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional KeyValuesFilter filter = 4;
 * @return {?proto.api.KeyValuesFilter}
 */
proto.api.CreateKeyValuesProofRequest.prototype.getFilter = function() {
  return /** @type{?proto.api.KeyValuesFilter} */ (
    jspb.Message.getWrapperField(this, proto.api.KeyValuesFilter, 4));
};


/**
 * @param {?proto.api.KeyValuesFilter|undefined} value
 * @return {!proto.api.CreateKeyValuesProofRequest} returns this
*/
proto.api.CreateKeyValuesProofRequest.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.CreateKeyValuesProofRequest} returns this
 */
proto.api.CreateKeyValuesProofRequest.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.CreateKeyValuesProofRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.VerifyKeyValuesProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.VerifyKeyValuesProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.VerifyKeyValuesProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.VerifyKeyValuesProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputKeyValues: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    outputDotGraph: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.VerifyKeyValuesProofRequest}
 */
proto.api.VerifyKeyValuesProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.VerifyKeyValuesProofRequest;
  return proto.api.VerifyKeyValuesProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.VerifyKeyValuesProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.VerifyKeyValuesProofRequest}
 */
proto.api.VerifyKeyValuesProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputKeyValues(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputDotGraph(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.VerifyKeyValuesProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.VerifyKeyValuesProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.VerifyKeyValuesProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.VerifyKeyValuesProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputKeyValues();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOutputDotGraph();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool output_key_values = 1;
 * @return {boolean}
 */
proto.api.VerifyKeyValuesProofRequest.prototype.getOutputKeyValues = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.VerifyKeyValuesProofRequest} returns this
 */
proto.api.VerifyKeyValuesProofRequest.prototype.setOutputKeyValues = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool output_dot_graph = 2;
 * @return {boolean}
 */
proto.api.VerifyKeyValuesProofRequest.prototype.getOutputDotGraph = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.VerifyKeyValuesProofRequest} returns this
 */
proto.api.VerifyKeyValuesProofRequest.prototype.setOutputDotGraph = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.VerifyProofReply.prototype.toObject = function(opt_includeInstance) {
  return proto.api.VerifyProofReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.VerifyProofReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.VerifyProofReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    verified: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.VerifyProofReply}
 */
proto.api.VerifyProofReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.VerifyProofReply;
  return proto.api.VerifyProofReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.VerifyProofReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.VerifyProofReply}
 */
proto.api.VerifyProofReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.VerifyProofReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.VerifyProofReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.VerifyProofReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.VerifyProofReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool verified = 1;
 * @return {boolean}
 */
proto.api.VerifyProofReply.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.VerifyProofReply} returns this
 */
proto.api.VerifyProofReply.prototype.setVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.api.VerifyProofReply.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.VerifyProofReply} returns this
 */
proto.api.VerifyProofReply.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.api);
